
build/joystick.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
   0:	49d0006f          	j	c9c <handle_reset>
   4:	00000000          	.word	0x00000000
   8:	00000d12          	.word	0x00000d12
   c:	00000d10          	.word	0x00000d10
	...
  30:	00000d10          	.word	0x00000d10
  34:	00000000          	.word	0x00000000
  38:	00000d10          	.word	0x00000d10
  3c:	00000000          	.word	0x00000000
  40:	00000d10          	.word	0x00000d10
  44:	00000d10          	.word	0x00000d10
  48:	00000d10          	.word	0x00000d10
  4c:	00000d10          	.word	0x00000d10
  50:	0000108c          	.word	0x0000108c
  54:	00000d10          	.word	0x00000d10
  58:	00000d10          	.word	0x00000d10
  5c:	00000d10          	.word	0x00000d10
  60:	00000d10          	.word	0x00000d10
  64:	00000d10          	.word	0x00000d10
  68:	00000d10          	.word	0x00000d10
  6c:	00000d10          	.word	0x00000d10
  70:	00000d10          	.word	0x00000d10
  74:	00000d10          	.word	0x00000d10
  78:	00000d10          	.word	0x00000d10
  7c:	00000d10          	.word	0x00000d10
  80:	00000d10          	.word	0x00000d10
  84:	00000d10          	.word	0x00000d10
  88:	00000d10          	.word	0x00000d10
  8c:	00000d10          	.word	0x00000d10
  90:	00000d10          	.word	0x00000d10
  94:	00000d10          	.word	0x00000d10
  98:	00000d10          	.word	0x00000d10
  9c:	0000                	.insn	2, 0x
	...

Disassembly of section .text:

000000a0 <__divsf3>:
      a0:	fd810113          	addi	sp,sp,-40
      a4:	01755693          	srli	a3,a0,0x17
      a8:	ce26                	sw	s1,28(sp)
      aa:	00951793          	slli	a5,a0,0x9
      ae:	d206                	sw	ra,36(sp)
      b0:	d022                	sw	s0,32(sp)
      b2:	0ff6f693          	zext.b	a3,a3
      b6:	83a5                	srli	a5,a5,0x9
      b8:	01f55493          	srli	s1,a0,0x1f
      bc:	c2ad                	beqz	a3,11e <__divsf3+0x7e>
      be:	0ff00713          	li	a4,255
      c2:	06e68f63          	beq	a3,a4,140 <__divsf3+0xa0>
      c6:	078e                	slli	a5,a5,0x3
      c8:	04000737          	lui	a4,0x4000
      cc:	8fd9                	or	a5,a5,a4
      ce:	f8168693          	addi	a3,a3,-127
      d2:	4301                	li	t1,0
      d4:	0175d613          	srli	a2,a1,0x17
      d8:	00959413          	slli	s0,a1,0x9
      dc:	0ff67613          	zext.b	a2,a2
      e0:	8025                	srli	s0,s0,0x9
      e2:	81fd                	srli	a1,a1,0x1f
      e4:	c63d                	beqz	a2,152 <__divsf3+0xb2>
      e6:	0ff00713          	li	a4,255
      ea:	08e60963          	beq	a2,a4,17c <__divsf3+0xdc>
      ee:	040e                	slli	s0,s0,0x3
      f0:	04000737          	lui	a4,0x4000
      f4:	8c59                	or	s0,s0,a4
      f6:	f8160613          	addi	a2,a2,-127
      fa:	4501                	li	a0,0
      fc:	8e91                	sub	a3,a3,a2
      fe:	00231613          	slli	a2,t1,0x2
     102:	8e49                	or	a2,a2,a0
     104:	167d                	addi	a2,a2,-1
     106:	42b9                	li	t0,14
     108:	00b4c733          	xor	a4,s1,a1
     10c:	0ac2e063          	bltu	t0,a2,1ac <__divsf3+0x10c>
     110:	6285                	lui	t0,0x1
     112:	060a                	slli	a2,a2,0x2
     114:	4cc28293          	addi	t0,t0,1228 # 14cc <string0+0x4>
     118:	9616                	add	a2,a2,t0
     11a:	4210                	lw	a2,0(a2)
     11c:	8602                	jr	a2
     11e:	c79d                	beqz	a5,14c <__divsf3+0xac>
     120:	853e                	mv	a0,a5
     122:	c22e                	sw	a1,4(sp)
     124:	c03e                	sw	a5,0(sp)
     126:	231000ef          	jal	b56 <__clzsi2>
     12a:	4782                	lw	a5,0(sp)
     12c:	ffb50713          	addi	a4,a0,-5
     130:	f8a00693          	li	a3,-118
     134:	4592                	lw	a1,4(sp)
     136:	00e797b3          	sll	a5,a5,a4
     13a:	8e89                	sub	a3,a3,a0
     13c:	4301                	li	t1,0
     13e:	bf59                	j	d4 <__divsf3+0x34>
     140:	0ff00693          	li	a3,255
     144:	430d                	li	t1,3
     146:	f7d9                	bnez	a5,d4 <__divsf3+0x34>
     148:	4309                	li	t1,2
     14a:	b769                	j	d4 <__divsf3+0x34>
     14c:	4681                	li	a3,0
     14e:	4305                	li	t1,1
     150:	b751                	j	d4 <__divsf3+0x34>
     152:	c81d                	beqz	s0,188 <__divsf3+0xe8>
     154:	8522                	mv	a0,s0
     156:	c63e                	sw	a5,12(sp)
     158:	c436                	sw	a3,8(sp)
     15a:	c21a                	sw	t1,4(sp)
     15c:	c02e                	sw	a1,0(sp)
     15e:	1f9000ef          	jal	b56 <__clzsi2>
     162:	ffb50713          	addi	a4,a0,-5
     166:	f8a00613          	li	a2,-118
     16a:	8e09                	sub	a2,a2,a0
     16c:	4582                	lw	a1,0(sp)
     16e:	4312                	lw	t1,4(sp)
     170:	46a2                	lw	a3,8(sp)
     172:	47b2                	lw	a5,12(sp)
     174:	00e41433          	sll	s0,s0,a4
     178:	4501                	li	a0,0
     17a:	b749                	j	fc <__divsf3+0x5c>
     17c:	0ff00613          	li	a2,255
     180:	450d                	li	a0,3
     182:	fc2d                	bnez	s0,fc <__divsf3+0x5c>
     184:	4509                	li	a0,2
     186:	bf9d                	j	fc <__divsf3+0x5c>
     188:	4601                	li	a2,0
     18a:	4505                	li	a0,1
     18c:	bf85                	j	fc <__divsf3+0x5c>
     18e:	8726                	mv	a4,s1
     190:	843e                	mv	s0,a5
     192:	851a                	mv	a0,t1
     194:	4789                	li	a5,2
     196:	1af50163          	beq	a0,a5,338 <__divsf3+0x298>
     19a:	478d                	li	a5,3
     19c:	18f50863          	beq	a0,a5,32c <__divsf3+0x28c>
     1a0:	4785                	li	a5,1
     1a2:	0ef51263          	bne	a0,a5,286 <__divsf3+0x1e6>
     1a6:	4781                	li	a5,0
     1a8:	4501                	li	a0,0
     1aa:	aa19                	j	2c0 <__divsf3+0x220>
     1ac:	00541613          	slli	a2,s0,0x5
     1b0:	1287f463          	bgeu	a5,s0,2d8 <__divsf3+0x238>
     1b4:	16fd                	addi	a3,a3,-1
     1b6:	4381                	li	t2,0
     1b8:	c83a                	sw	a4,16(sp)
     1ba:	01065713          	srli	a4,a2,0x10
     1be:	c03a                	sw	a4,0(sp)
     1c0:	4582                	lw	a1,0(sp)
     1c2:	6441                	lui	s0,0x10
     1c4:	147d                	addi	s0,s0,-1 # ffff <rv003usb.c.4d2817cb+0xcfd5>
     1c6:	00867733          	and	a4,a2,s0
     1ca:	853e                	mv	a0,a5
     1cc:	cc36                	sw	a3,24(sp)
     1ce:	ca1e                	sw	t2,20(sp)
     1d0:	c632                	sw	a2,12(sp)
     1d2:	c23a                	sw	a4,4(sp)
     1d4:	c43e                	sw	a5,8(sp)
     1d6:	10b000ef          	jal	ae0 <__hidden___udivsi3>
     1da:	85aa                	mv	a1,a0
     1dc:	842a                	mv	s0,a0
     1de:	4512                	lw	a0,4(sp)
     1e0:	0e1000ef          	jal	ac0 <__mulsi3>
     1e4:	47a2                	lw	a5,8(sp)
     1e6:	4582                	lw	a1,0(sp)
     1e8:	84aa                	mv	s1,a0
     1ea:	853e                	mv	a0,a5
     1ec:	121000ef          	jal	b0c <__umodsi3>
     1f0:	43d2                	lw	t2,20(sp)
     1f2:	0542                	slli	a0,a0,0x10
     1f4:	4632                	lw	a2,12(sp)
     1f6:	0103d593          	srli	a1,t2,0x10
     1fa:	8dc9                	or	a1,a1,a0
     1fc:	4742                	lw	a4,16(sp)
     1fe:	46e2                	lw	a3,24(sp)
     200:	87a2                	mv	a5,s0
     202:	0095fc63          	bgeu	a1,s1,21a <__divsf3+0x17a>
     206:	95b2                	add	a1,a1,a2
     208:	fff40793          	addi	a5,s0,-1
     20c:	00c5e763          	bltu	a1,a2,21a <__divsf3+0x17a>
     210:	0095f563          	bgeu	a1,s1,21a <__divsf3+0x17a>
     214:	ffe40793          	addi	a5,s0,-2
     218:	95b2                	add	a1,a1,a2
     21a:	c83e                	sw	a5,16(sp)
     21c:	409587b3          	sub	a5,a1,s1
     220:	4582                	lw	a1,0(sp)
     222:	853e                	mv	a0,a5
     224:	843e                	mv	s0,a5
     226:	ca36                	sw	a3,20(sp)
     228:	c63a                	sw	a4,12(sp)
     22a:	cc32                	sw	a2,24(sp)
     22c:	0b5000ef          	jal	ae0 <__hidden___udivsi3>
     230:	85aa                	mv	a1,a0
     232:	c42a                	sw	a0,8(sp)
     234:	4512                	lw	a0,4(sp)
     236:	08b000ef          	jal	ac0 <__mulsi3>
     23a:	4582                	lw	a1,0(sp)
     23c:	84aa                	mv	s1,a0
     23e:	8522                	mv	a0,s0
     240:	0cd000ef          	jal	b0c <__umodsi3>
     244:	43a2                	lw	t2,8(sp)
     246:	01051313          	slli	t1,a0,0x10
     24a:	4732                	lw	a4,12(sp)
     24c:	47c2                	lw	a5,16(sp)
     24e:	46d2                	lw	a3,20(sp)
     250:	859e                	mv	a1,t2
     252:	02937163          	bgeu	t1,s1,274 <__divsf3+0x1d4>
     256:	4662                	lw	a2,24(sp)
     258:	fff38593          	addi	a1,t2,-1
     25c:	00c30533          	add	a0,t1,a2
     260:	00653433          	sltu	s0,a0,t1
     264:	832a                	mv	t1,a0
     266:	e419                	bnez	s0,274 <__divsf3+0x1d4>
     268:	00957663          	bgeu	a0,s1,274 <__divsf3+0x1d4>
     26c:	ffe38593          	addi	a1,t2,-2
     270:	00c50333          	add	t1,a0,a2
     274:	01079413          	slli	s0,a5,0x10
     278:	40930333          	sub	t1,t1,s1
     27c:	8c4d                	or	s0,s0,a1
     27e:	00603333          	snez	t1,t1
     282:	00646433          	or	s0,s0,t1
     286:	07f68513          	addi	a0,a3,127
     28a:	04a05d63          	blez	a0,2e4 <__divsf3+0x244>
     28e:	00747793          	andi	a5,s0,7
     292:	c799                	beqz	a5,2a0 <__divsf3+0x200>
     294:	00f47793          	andi	a5,s0,15
     298:	4611                	li	a2,4
     29a:	00c78363          	beq	a5,a2,2a0 <__divsf3+0x200>
     29e:	0411                	addi	s0,s0,4
     2a0:	080007b7          	lui	a5,0x8000
     2a4:	8fe1                	and	a5,a5,s0
     2a6:	c799                	beqz	a5,2b4 <__divsf3+0x214>
     2a8:	f80007b7          	lui	a5,0xf8000
     2ac:	17fd                	addi	a5,a5,-1 # f7ffffff <__global_pointer$+0xd7fff7ff>
     2ae:	8c7d                	and	s0,s0,a5
     2b0:	08068513          	addi	a0,a3,128
     2b4:	0fe00793          	li	a5,254
     2b8:	08a7c063          	blt	a5,a0,338 <__divsf3+0x298>
     2bc:	00345793          	srli	a5,s0,0x3
     2c0:	5092                	lw	ra,36(sp)
     2c2:	5402                	lw	s0,32(sp)
     2c4:	07a6                	slli	a5,a5,0x9
     2c6:	055e                	slli	a0,a0,0x17
     2c8:	83a5                	srli	a5,a5,0x9
     2ca:	8d5d                	or	a0,a0,a5
     2cc:	077e                	slli	a4,a4,0x1f
     2ce:	44f2                	lw	s1,28(sp)
     2d0:	8d59                	or	a0,a0,a4
     2d2:	02810113          	addi	sp,sp,40
     2d6:	8082                	ret
     2d8:	01f79393          	slli	t2,a5,0x1f
     2dc:	8385                	srli	a5,a5,0x1
     2de:	bde9                	j	1b8 <__divsf3+0x118>
     2e0:	872e                	mv	a4,a1
     2e2:	bd4d                	j	194 <__divsf3+0xf4>
     2e4:	4605                	li	a2,1
     2e6:	c519                	beqz	a0,2f4 <__divsf3+0x254>
     2e8:	8e09                	sub	a2,a2,a0
     2ea:	45ed                	li	a1,27
     2ec:	4781                	li	a5,0
     2ee:	4501                	li	a0,0
     2f0:	fcc5c8e3          	blt	a1,a2,2c0 <__divsf3+0x220>
     2f4:	09e68693          	addi	a3,a3,158
     2f8:	00c45633          	srl	a2,s0,a2
     2fc:	00d41433          	sll	s0,s0,a3
     300:	00803433          	snez	s0,s0
     304:	008667b3          	or	a5,a2,s0
     308:	0077f693          	andi	a3,a5,7
     30c:	c699                	beqz	a3,31a <__divsf3+0x27a>
     30e:	00f7f693          	andi	a3,a5,15
     312:	4611                	li	a2,4
     314:	00c68363          	beq	a3,a2,31a <__divsf3+0x27a>
     318:	0791                	addi	a5,a5,4
     31a:	040006b7          	lui	a3,0x4000
     31e:	8efd                	and	a3,a3,a5
     320:	838d                	srli	a5,a5,0x3
     322:	e80683e3          	beqz	a3,1a8 <__divsf3+0x108>
     326:	4781                	li	a5,0
     328:	4505                	li	a0,1
     32a:	bf59                	j	2c0 <__divsf3+0x220>
     32c:	004007b7          	lui	a5,0x400
     330:	0ff00513          	li	a0,255
     334:	4701                	li	a4,0
     336:	b769                	j	2c0 <__divsf3+0x220>
     338:	4781                	li	a5,0
     33a:	0ff00513          	li	a0,255
     33e:	b749                	j	2c0 <__divsf3+0x220>

00000340 <__mulsf3>:
     340:	1111                	addi	sp,sp,-28
     342:	01755293          	srli	t0,a0,0x17
     346:	ca22                	sw	s0,20(sp)
     348:	c826                	sw	s1,16(sp)
     34a:	00951713          	slli	a4,a0,0x9
     34e:	cc06                	sw	ra,24(sp)
     350:	0ff2f293          	zext.b	t0,t0
     354:	84ae                	mv	s1,a1
     356:	8325                	srli	a4,a4,0x9
     358:	01f55413          	srli	s0,a0,0x1f
     35c:	12028b63          	beqz	t0,492 <__mulsf3+0x152>
     360:	0ff00793          	li	a5,255
     364:	14f28563          	beq	t0,a5,4ae <__mulsf3+0x16e>
     368:	070e                	slli	a4,a4,0x3
     36a:	040007b7          	lui	a5,0x4000
     36e:	8f5d                	or	a4,a4,a5
     370:	f8128293          	addi	t0,t0,-127
     374:	4601                	li	a2,0
     376:	0174d693          	srli	a3,s1,0x17
     37a:	00949793          	slli	a5,s1,0x9
     37e:	0ff6f693          	zext.b	a3,a3
     382:	83a5                	srli	a5,a5,0x9
     384:	80fd                	srli	s1,s1,0x1f
     386:	12068e63          	beqz	a3,4c2 <__mulsf3+0x182>
     38a:	0ff00593          	li	a1,255
     38e:	14b68e63          	beq	a3,a1,4ea <__mulsf3+0x1aa>
     392:	040005b7          	lui	a1,0x4000
     396:	078e                	slli	a5,a5,0x3
     398:	8fcd                	or	a5,a5,a1
     39a:	f8168693          	addi	a3,a3,-127 # 3ffff81 <rv003usb.c.4d2817cb+0x3ffcf57>
     39e:	4581                	li	a1,0
     3a0:	9696                	add	a3,a3,t0
     3a2:	c036                	sw	a3,0(sp)
     3a4:	00168293          	addi	t0,a3,1
     3a8:	00261693          	slli	a3,a2,0x2
     3ac:	8ecd                	or	a3,a3,a1
     3ae:	4529                	li	a0,10
     3b0:	00944333          	xor	t1,s0,s1
     3b4:	16d54f63          	blt	a0,a3,532 <__mulsf3+0x1f2>
     3b8:	4509                	li	a0,2
     3ba:	14d54263          	blt	a0,a3,4fe <__mulsf3+0x1be>
     3be:	16fd                	addi	a3,a3,-1
     3c0:	4605                	li	a2,1
     3c2:	14d67c63          	bgeu	a2,a3,51a <__mulsf3+0x1da>
     3c6:	64c1                	lui	s1,0x10
     3c8:	01075693          	srli	a3,a4,0x10
     3cc:	fff48393          	addi	t2,s1,-1 # ffff <rv003usb.c.4d2817cb+0xcfd5>
     3d0:	c236                	sw	a3,4(sp)
     3d2:	00777733          	and	a4,a4,t2
     3d6:	0107d693          	srli	a3,a5,0x10
     3da:	0077f7b3          	and	a5,a5,t2
     3de:	c436                	sw	a3,8(sp)
     3e0:	853a                	mv	a0,a4
     3e2:	85be                	mv	a1,a5
     3e4:	2df1                	jal	ac0 <__mulsi3>
     3e6:	842a                	mv	s0,a0
     3e8:	45a2                	lw	a1,8(sp)
     3ea:	853a                	mv	a0,a4
     3ec:	2dd1                	jal	ac0 <__mulsi3>
     3ee:	872a                	mv	a4,a0
     3f0:	85be                	mv	a1,a5
     3f2:	4512                	lw	a0,4(sp)
     3f4:	25f1                	jal	ac0 <__mulsi3>
     3f6:	87aa                	mv	a5,a0
     3f8:	45a2                	lw	a1,8(sp)
     3fa:	4512                	lw	a0,4(sp)
     3fc:	25d1                	jal	ac0 <__mulsi3>
     3fe:	01045693          	srli	a3,s0,0x10
     402:	973e                	add	a4,a4,a5
     404:	9736                	add	a4,a4,a3
     406:	00f77363          	bgeu	a4,a5,40c <__mulsf3+0xcc>
     40a:	9526                	add	a0,a0,s1
     40c:	007777b3          	and	a5,a4,t2
     410:	007476b3          	and	a3,s0,t2
     414:	07c2                	slli	a5,a5,0x10
     416:	97b6                	add	a5,a5,a3
     418:	00679693          	slli	a3,a5,0x6
     41c:	00d036b3          	snez	a3,a3
     420:	83e9                	srli	a5,a5,0x1a
     422:	8edd                	or	a3,a3,a5
     424:	01075793          	srli	a5,a4,0x10
     428:	97aa                	add	a5,a5,a0
     42a:	079a                	slli	a5,a5,0x6
     42c:	8fd5                	or	a5,a5,a3
     42e:	08000737          	lui	a4,0x8000
     432:	8f7d                	and	a4,a4,a5
     434:	10070963          	beqz	a4,546 <__mulsf3+0x206>
     438:	0017d713          	srli	a4,a5,0x1
     43c:	8b85                	andi	a5,a5,1
     43e:	8fd9                	or	a5,a5,a4
     440:	07f28513          	addi	a0,t0,127
     444:	10a05363          	blez	a0,54a <__mulsf3+0x20a>
     448:	0077f713          	andi	a4,a5,7
     44c:	c719                	beqz	a4,45a <__mulsf3+0x11a>
     44e:	00f7f713          	andi	a4,a5,15
     452:	4691                	li	a3,4
     454:	00d70363          	beq	a4,a3,45a <__mulsf3+0x11a>
     458:	0791                	addi	a5,a5,4 # 4000004 <rv003usb.c.4d2817cb+0x3ffcfda>
     45a:	08000737          	lui	a4,0x8000
     45e:	8f7d                	and	a4,a4,a5
     460:	c719                	beqz	a4,46e <__mulsf3+0x12e>
     462:	f8000737          	lui	a4,0xf8000
     466:	177d                	addi	a4,a4,-1 # f7ffffff <__global_pointer$+0xd7fff7ff>
     468:	8ff9                	and	a5,a5,a4
     46a:	08028513          	addi	a0,t0,128
     46e:	0fe00713          	li	a4,254
     472:	12a74563          	blt	a4,a0,59c <__mulsf3+0x25c>
     476:	0037d713          	srli	a4,a5,0x3
     47a:	40e2                	lw	ra,24(sp)
     47c:	4452                	lw	s0,20(sp)
     47e:	0726                	slli	a4,a4,0x9
     480:	055e                	slli	a0,a0,0x17
     482:	8325                	srli	a4,a4,0x9
     484:	8d59                	or	a0,a0,a4
     486:	037e                	slli	t1,t1,0x1f
     488:	44c2                	lw	s1,16(sp)
     48a:	00656533          	or	a0,a0,t1
     48e:	0171                	addi	sp,sp,28
     490:	8082                	ret
     492:	c70d                	beqz	a4,4bc <__mulsf3+0x17c>
     494:	853a                	mv	a0,a4
     496:	c03a                	sw	a4,0(sp)
     498:	2d7d                	jal	b56 <__clzsi2>
     49a:	4702                	lw	a4,0(sp)
     49c:	ffb50793          	addi	a5,a0,-5
     4a0:	f8a00293          	li	t0,-118
     4a4:	00f71733          	sll	a4,a4,a5
     4a8:	40a282b3          	sub	t0,t0,a0
     4ac:	b5e1                	j	374 <__mulsf3+0x34>
     4ae:	0ff00293          	li	t0,255
     4b2:	460d                	li	a2,3
     4b4:	ec0711e3          	bnez	a4,376 <__mulsf3+0x36>
     4b8:	4609                	li	a2,2
     4ba:	bd75                	j	376 <__mulsf3+0x36>
     4bc:	4281                	li	t0,0
     4be:	4605                	li	a2,1
     4c0:	bd5d                	j	376 <__mulsf3+0x36>
     4c2:	cb9d                	beqz	a5,4f8 <__mulsf3+0x1b8>
     4c4:	853e                	mv	a0,a5
     4c6:	c63a                	sw	a4,12(sp)
     4c8:	c416                	sw	t0,8(sp)
     4ca:	c232                	sw	a2,4(sp)
     4cc:	c03e                	sw	a5,0(sp)
     4ce:	2561                	jal	b56 <__clzsi2>
     4d0:	4782                	lw	a5,0(sp)
     4d2:	ffb50693          	addi	a3,a0,-5
     4d6:	4612                	lw	a2,4(sp)
     4d8:	00d797b3          	sll	a5,a5,a3
     4dc:	f8a00693          	li	a3,-118
     4e0:	42a2                	lw	t0,8(sp)
     4e2:	4732                	lw	a4,12(sp)
     4e4:	8e89                	sub	a3,a3,a0
     4e6:	4581                	li	a1,0
     4e8:	bd65                	j	3a0 <__mulsf3+0x60>
     4ea:	0ff00693          	li	a3,255
     4ee:	458d                	li	a1,3
     4f0:	ea0798e3          	bnez	a5,3a0 <__mulsf3+0x60>
     4f4:	4589                	li	a1,2
     4f6:	b56d                	j	3a0 <__mulsf3+0x60>
     4f8:	4681                	li	a3,0
     4fa:	4585                	li	a1,1
     4fc:	b555                	j	3a0 <__mulsf3+0x60>
     4fe:	4505                	li	a0,1
     500:	00d516b3          	sll	a3,a0,a3
     504:	5306f513          	andi	a0,a3,1328
     508:	ed05                	bnez	a0,540 <__mulsf3+0x200>
     50a:	2406f613          	andi	a2,a3,576
     50e:	e249                	bnez	a2,590 <__mulsf3+0x250>
     510:	0886f693          	andi	a3,a3,136
     514:	ea0689e3          	beqz	a3,3c6 <__mulsf3+0x86>
     518:	8326                	mv	t1,s1
     51a:	4709                	li	a4,2
     51c:	08e58063          	beq	a1,a4,59c <__mulsf3+0x25c>
     520:	470d                	li	a4,3
     522:	06e58763          	beq	a1,a4,590 <__mulsf3+0x250>
     526:	4705                	li	a4,1
     528:	f0e59ce3          	bne	a1,a4,440 <__mulsf3+0x100>
     52c:	4701                	li	a4,0
     52e:	4501                	li	a0,0
     530:	b7a9                	j	47a <__mulsf3+0x13a>
     532:	453d                	li	a0,15
     534:	04a68e63          	beq	a3,a0,590 <__mulsf3+0x250>
     538:	452d                	li	a0,11
     53a:	8322                	mv	t1,s0
     53c:	fca68ee3          	beq	a3,a0,518 <__mulsf3+0x1d8>
     540:	87ba                	mv	a5,a4
     542:	85b2                	mv	a1,a2
     544:	bfd9                	j	51a <__mulsf3+0x1da>
     546:	4282                	lw	t0,0(sp)
     548:	bde5                	j	440 <__mulsf3+0x100>
     54a:	4685                	li	a3,1
     54c:	c519                	beqz	a0,55a <__mulsf3+0x21a>
     54e:	8e89                	sub	a3,a3,a0
     550:	466d                	li	a2,27
     552:	4701                	li	a4,0
     554:	4501                	li	a0,0
     556:	f2d642e3          	blt	a2,a3,47a <__mulsf3+0x13a>
     55a:	09e28293          	addi	t0,t0,158
     55e:	00d7d6b3          	srl	a3,a5,a3
     562:	005797b3          	sll	a5,a5,t0
     566:	00f037b3          	snez	a5,a5
     56a:	00f6e733          	or	a4,a3,a5
     56e:	00777793          	andi	a5,a4,7
     572:	c799                	beqz	a5,580 <__mulsf3+0x240>
     574:	00f77793          	andi	a5,a4,15
     578:	4691                	li	a3,4
     57a:	00d78363          	beq	a5,a3,580 <__mulsf3+0x240>
     57e:	0711                	addi	a4,a4,4
     580:	040007b7          	lui	a5,0x4000
     584:	8ff9                	and	a5,a5,a4
     586:	830d                	srli	a4,a4,0x3
     588:	d3dd                	beqz	a5,52e <__mulsf3+0x1ee>
     58a:	4701                	li	a4,0
     58c:	4505                	li	a0,1
     58e:	b5f5                	j	47a <__mulsf3+0x13a>
     590:	00400737          	lui	a4,0x400
     594:	0ff00513          	li	a0,255
     598:	4301                	li	t1,0
     59a:	b5c5                	j	47a <__mulsf3+0x13a>
     59c:	4701                	li	a4,0
     59e:	0ff00513          	li	a0,255
     5a2:	bde1                	j	47a <__mulsf3+0x13a>

000005a4 <__subsf3>:
     5a4:	008007b7          	lui	a5,0x800
     5a8:	1141                	addi	sp,sp,-16
     5aa:	17fd                	addi	a5,a5,-1 # 7fffff <rv003usb.c.4d2817cb+0x7fcfd5>
     5ac:	00a7f633          	and	a2,a5,a0
     5b0:	c422                	sw	s0,8(sp)
     5b2:	01f55713          	srli	a4,a0,0x1f
     5b6:	01755413          	srli	s0,a0,0x17
     5ba:	0175d513          	srli	a0,a1,0x17
     5be:	8fed                	and	a5,a5,a1
     5c0:	c606                	sw	ra,12(sp)
     5c2:	c226                	sw	s1,4(sp)
     5c4:	0ff57513          	zext.b	a0,a0
     5c8:	0ff00313          	li	t1,255
     5cc:	0ff47413          	zext.b	s0,s0
     5d0:	060e                	slli	a2,a2,0x3
     5d2:	81fd                	srli	a1,a1,0x1f
     5d4:	078e                	slli	a5,a5,0x3
     5d6:	06651763          	bne	a0,t1,644 <__subsf3+0xa0>
     5da:	f0140693          	addi	a3,s0,-255
     5de:	cb91                	beqz	a5,5f2 <__subsf3+0x4e>
     5e0:	82ae                	mv	t0,a1
     5e2:	1eb71363          	bne	a4,a1,7c8 <__subsf3+0x224>
     5e6:	14068363          	beqz	a3,72c <__subsf3+0x188>
     5ea:	e451                	bnez	s0,676 <__subsf3+0xd2>
     5ec:	0ff00413          	li	s0,255
     5f0:	a211                	j	6f4 <__subsf3+0x150>
     5f2:	0015c293          	xori	t0,a1,1
     5f6:	1c571f63          	bne	a4,t0,7d4 <__subsf3+0x230>
     5fa:	12068963          	beqz	a3,72c <__subsf3+0x188>
     5fe:	d47d                	beqz	s0,5ec <__subsf3+0x48>
     600:	0ff00413          	li	s0,255
     604:	040006b7          	lui	a3,0x4000
     608:	8efd                	and	a3,a3,a5
     60a:	2c068963          	beqz	a3,8dc <__subsf3+0x338>
     60e:	0405                	addi	s0,s0,1
     610:	0ff00693          	li	a3,255
     614:	4481                	li	s1,0
     616:	00d40863          	beq	s0,a3,626 <__subsf3+0x82>
     61a:	0037d493          	srli	s1,a5,0x3
     61e:	1f8007b7          	lui	a5,0x1f800
     622:	17fd                	addi	a5,a5,-1 # 1f7fffff <rv003usb.c.4d2817cb+0x1f7fcfd5>
     624:	8cfd                	and	s1,s1,a5
     626:	045e                	slli	s0,s0,0x17
     628:	7f8007b7          	lui	a5,0x7f800
     62c:	04a6                	slli	s1,s1,0x9
     62e:	80a5                	srli	s1,s1,0x9
     630:	8c7d                	and	s0,s0,a5
     632:	8c45                	or	s0,s0,s1
     634:	01f71513          	slli	a0,a4,0x1f
     638:	40b2                	lw	ra,12(sp)
     63a:	8d41                	or	a0,a0,s0
     63c:	4422                	lw	s0,8(sp)
     63e:	4492                	lw	s1,4(sp)
     640:	0141                	addi	sp,sp,16
     642:	8082                	ret
     644:	0015c293          	xori	t0,a1,1
     648:	40a406b3          	sub	a3,s0,a0
     64c:	10571f63          	bne	a4,t0,76a <__subsf3+0x1c6>
     650:	08d05963          	blez	a3,6e2 <__subsf3+0x13e>
     654:	e505                	bnez	a0,67c <__subsf3+0xd8>
     656:	26078f63          	beqz	a5,8d4 <__subsf3+0x330>
     65a:	fff68593          	addi	a1,a3,-1 # 3ffffff <rv003usb.c.4d2817cb+0x3ffcfd5>
     65e:	e989                	bnez	a1,670 <__subsf3+0xcc>
     660:	97b2                	add	a5,a5,a2
     662:	040006b7          	lui	a3,0x4000
     666:	8efd                	and	a3,a3,a5
     668:	4409                	li	s0,2
     66a:	e2bd                	bnez	a3,6d0 <__subsf3+0x12c>
     66c:	4405                	li	s0,1
     66e:	a015                	j	692 <__subsf3+0xee>
     670:	00669c63          	bne	a3,t1,688 <__subsf3+0xe4>
     674:	87b2                	mv	a5,a2
     676:	0ff00413          	li	s0,255
     67a:	a821                	j	692 <__subsf3+0xee>
     67c:	24640e63          	beq	s0,t1,8d8 <__subsf3+0x334>
     680:	040005b7          	lui	a1,0x4000
     684:	8fcd                	or	a5,a5,a1
     686:	85b6                	mv	a1,a3
     688:	46ed                	li	a3,27
     68a:	00b6de63          	bge	a3,a1,6a6 <__subsf3+0x102>
     68e:	00160793          	addi	a5,a2,1
     692:	0077f693          	andi	a3,a5,7
     696:	d6bd                	beqz	a3,604 <__subsf3+0x60>
     698:	00f7f693          	andi	a3,a5,15
     69c:	4611                	li	a2,4
     69e:	f6c683e3          	beq	a3,a2,604 <__subsf3+0x60>
     6a2:	0791                	addi	a5,a5,4 # 7f800004 <__global_pointer$+0x5f7ff804>
     6a4:	b785                	j	604 <__subsf3+0x60>
     6a6:	02000693          	li	a3,32
     6aa:	8e8d                	sub	a3,a3,a1
     6ac:	00b7d533          	srl	a0,a5,a1
     6b0:	00d797b3          	sll	a5,a5,a3
     6b4:	00f037b3          	snez	a5,a5
     6b8:	8fc9                	or	a5,a5,a0
     6ba:	97b2                	add	a5,a5,a2
     6bc:	040006b7          	lui	a3,0x4000
     6c0:	8efd                	and	a3,a3,a5
     6c2:	dae1                	beqz	a3,692 <__subsf3+0xee>
     6c4:	0405                	addi	s0,s0,1
     6c6:	0ff00693          	li	a3,255
     6ca:	4481                	li	s1,0
     6cc:	f4d40de3          	beq	s0,a3,626 <__subsf3+0x82>
     6d0:	7e0006b7          	lui	a3,0x7e000
     6d4:	0017f613          	andi	a2,a5,1
     6d8:	16fd                	addi	a3,a3,-1 # 7dffffff <__global_pointer$+0x5dfff7ff>
     6da:	8385                	srli	a5,a5,0x1
     6dc:	8ff5                	and	a5,a5,a3
     6de:	8fd1                	or	a5,a5,a2
     6e0:	bf4d                	j	692 <__subsf3+0xee>
     6e2:	c6a9                	beqz	a3,72c <__subsf3+0x188>
     6e4:	408505b3          	sub	a1,a0,s0
     6e8:	c409                	beqz	s0,6f2 <__subsf3+0x14e>
     6ea:	040006b7          	lui	a3,0x4000
     6ee:	8e55                	or	a2,a2,a3
     6f0:	a811                	j	704 <__subsf3+0x160>
     6f2:	842e                	mv	s0,a1
     6f4:	de59                	beqz	a2,692 <__subsf3+0xee>
     6f6:	fff40593          	addi	a1,s0,-1
     6fa:	d1bd                	beqz	a1,660 <__subsf3+0xbc>
     6fc:	0ff00693          	li	a3,255
     700:	f8d409e3          	beq	s0,a3,692 <__subsf3+0xee>
     704:	46ed                	li	a3,27
     706:	00b6d563          	bge	a3,a1,710 <__subsf3+0x16c>
     70a:	0785                	addi	a5,a5,1
     70c:	842a                	mv	s0,a0
     70e:	b751                	j	692 <__subsf3+0xee>
     710:	02000693          	li	a3,32
     714:	8e8d                	sub	a3,a3,a1
     716:	00d616b3          	sll	a3,a2,a3
     71a:	00b65333          	srl	t1,a2,a1
     71e:	00d036b3          	snez	a3,a3
     722:	00d366b3          	or	a3,t1,a3
     726:	97b6                	add	a5,a5,a3
     728:	842a                	mv	s0,a0
     72a:	bf49                	j	6bc <__subsf3+0x118>
     72c:	00140693          	addi	a3,s0,1
     730:	0fe6f593          	andi	a1,a3,254
     734:	e195                	bnez	a1,758 <__subsf3+0x1b4>
     736:	ec11                	bnez	s0,752 <__subsf3+0x1ae>
     738:	de29                	beqz	a2,692 <__subsf3+0xee>
     73a:	18078f63          	beqz	a5,8d8 <__subsf3+0x334>
     73e:	97b2                	add	a5,a5,a2
     740:	040006b7          	lui	a3,0x4000
     744:	8efd                	and	a3,a3,a5
     746:	d6b1                	beqz	a3,692 <__subsf3+0xee>
     748:	fc0006b7          	lui	a3,0xfc000
     74c:	16fd                	addi	a3,a3,-1 # fbffffff <__global_pointer$+0xdbfff7ff>
     74e:	8ff5                	and	a5,a5,a3
     750:	bf31                	j	66c <__subsf3+0xc8>
     752:	d215                	beqz	a2,676 <__subsf3+0xd2>
     754:	d385                	beqz	a5,674 <__subsf3+0xd0>
     756:	a205                	j	876 <__subsf3+0x2d2>
     758:	0ff00593          	li	a1,255
     75c:	18b68b63          	beq	a3,a1,8f2 <__subsf3+0x34e>
     760:	963e                	add	a2,a2,a5
     762:	00165793          	srli	a5,a2,0x1
     766:	8436                	mv	s0,a3
     768:	b72d                	j	692 <__subsf3+0xee>
     76a:	06d05b63          	blez	a3,7e0 <__subsf3+0x23c>
     76e:	e531                	bnez	a0,7ba <__subsf3+0x216>
     770:	16078263          	beqz	a5,8d4 <__subsf3+0x330>
     774:	fff68593          	addi	a1,a3,-1
     778:	e589                	bnez	a1,782 <__subsf3+0x1de>
     77a:	40f607b3          	sub	a5,a2,a5
     77e:	4405                	li	s0,1
     780:	a025                	j	7a8 <__subsf3+0x204>
     782:	ee6689e3          	beq	a3,t1,674 <__subsf3+0xd0>
     786:	456d                	li	a0,27
     788:	4685                	li	a3,1
     78a:	00b54d63          	blt	a0,a1,7a4 <__subsf3+0x200>
     78e:	02000693          	li	a3,32
     792:	8e8d                	sub	a3,a3,a1
     794:	00b7d533          	srl	a0,a5,a1
     798:	00d797b3          	sll	a5,a5,a3
     79c:	00f037b3          	snez	a5,a5
     7a0:	00f566b3          	or	a3,a0,a5
     7a4:	40d607b3          	sub	a5,a2,a3
     7a8:	040004b7          	lui	s1,0x4000
     7ac:	0097f6b3          	and	a3,a5,s1
     7b0:	ee0681e3          	beqz	a3,692 <__subsf3+0xee>
     7b4:	14fd                	addi	s1,s1,-1 # 3ffffff <rv003usb.c.4d2817cb+0x3ffcfd5>
     7b6:	8cfd                	and	s1,s1,a5
     7b8:	a8f1                	j	894 <__subsf3+0x2f0>
     7ba:	10640f63          	beq	s0,t1,8d8 <__subsf3+0x334>
     7be:	040005b7          	lui	a1,0x4000
     7c2:	8fcd                	or	a5,a5,a1
     7c4:	85b6                	mv	a1,a3
     7c6:	b7c1                	j	786 <__subsf3+0x1e2>
     7c8:	cab5                	beqz	a3,83c <__subsf3+0x298>
     7ca:	c805                	beqz	s0,7fa <__subsf3+0x256>
     7cc:	0ff00413          	li	s0,255
     7d0:	872e                	mv	a4,a1
     7d2:	b5c1                	j	692 <__subsf3+0xee>
     7d4:	c6a5                	beqz	a3,83c <__subsf3+0x298>
     7d6:	c415                	beqz	s0,802 <__subsf3+0x25e>
     7d8:	0ff00413          	li	s0,255
     7dc:	8716                	mv	a4,t0
     7de:	b51d                	j	604 <__subsf3+0x60>
     7e0:	ceb1                	beqz	a3,83c <__subsf3+0x298>
     7e2:	408505b3          	sub	a1,a0,s0
     7e6:	e431                	bnez	s0,832 <__subsf3+0x28e>
     7e8:	8716                	mv	a4,t0
     7ea:	842e                	mv	s0,a1
     7ec:	ea0603e3          	beqz	a2,692 <__subsf3+0xee>
     7f0:	fff40593          	addi	a1,s0,-1
     7f4:	e989                	bnez	a1,806 <__subsf3+0x262>
     7f6:	8f91                	sub	a5,a5,a2
     7f8:	b759                	j	77e <__subsf3+0x1da>
     7fa:	872e                	mv	a4,a1
     7fc:	0ff00413          	li	s0,255
     800:	b7f5                	j	7ec <__subsf3+0x248>
     802:	8716                	mv	a4,t0
     804:	bfe5                	j	7fc <__subsf3+0x258>
     806:	0ff00693          	li	a3,255
     80a:	e8d404e3          	beq	s0,a3,692 <__subsf3+0xee>
     80e:	436d                	li	t1,27
     810:	4685                	li	a3,1
     812:	00b34d63          	blt	t1,a1,82c <__subsf3+0x288>
     816:	02000693          	li	a3,32
     81a:	8e8d                	sub	a3,a3,a1
     81c:	00d616b3          	sll	a3,a2,a3
     820:	00b65333          	srl	t1,a2,a1
     824:	00d036b3          	snez	a3,a3
     828:	00d366b3          	or	a3,t1,a3
     82c:	8f95                	sub	a5,a5,a3
     82e:	842a                	mv	s0,a0
     830:	bfa5                	j	7a8 <__subsf3+0x204>
     832:	04000737          	lui	a4,0x4000
     836:	8e59                	or	a2,a2,a4
     838:	8716                	mv	a4,t0
     83a:	bfd1                	j	80e <__subsf3+0x26a>
     83c:	00140693          	addi	a3,s0,1
     840:	0fe6f693          	andi	a3,a3,254
     844:	ee9d                	bnez	a3,882 <__subsf3+0x2de>
     846:	e01d                	bnez	s0,86c <__subsf3+0x2c8>
     848:	e601                	bnez	a2,850 <__subsf3+0x2ac>
     84a:	cbc5                	beqz	a5,8fa <__subsf3+0x356>
     84c:	8716                	mv	a4,t0
     84e:	b591                	j	692 <__subsf3+0xee>
     850:	c7c1                	beqz	a5,8d8 <__subsf3+0x334>
     852:	40f604b3          	sub	s1,a2,a5
     856:	040006b7          	lui	a3,0x4000
     85a:	8ee5                	and	a3,a3,s1
     85c:	c299                	beqz	a3,862 <__subsf3+0x2be>
     85e:	8f91                	sub	a5,a5,a2
     860:	b7f5                	j	84c <__subsf3+0x2a8>
     862:	87a6                	mv	a5,s1
     864:	e20497e3          	bnez	s1,692 <__subsf3+0xee>
     868:	4701                	li	a4,0
     86a:	bb75                	j	626 <__subsf3+0x82>
     86c:	ee0614e3          	bnez	a2,754 <__subsf3+0x1b0>
     870:	8716                	mv	a4,t0
     872:	e00792e3          	bnez	a5,676 <__subsf3+0xd2>
     876:	4701                	li	a4,0
     878:	0ff00413          	li	s0,255
     87c:	004004b7          	lui	s1,0x400
     880:	b35d                	j	626 <__subsf3+0x82>
     882:	40f604b3          	sub	s1,a2,a5
     886:	040006b7          	lui	a3,0x4000
     88a:	8ee5                	and	a3,a3,s1
     88c:	ca9d                	beqz	a3,8c2 <__subsf3+0x31e>
     88e:	40c784b3          	sub	s1,a5,a2
     892:	8716                	mv	a4,t0
     894:	8526                	mv	a0,s1
     896:	c03a                	sw	a4,0(sp)
     898:	2c7d                	jal	b56 <__clzsi2>
     89a:	156d                	addi	a0,a0,-5
     89c:	4702                	lw	a4,0(sp)
     89e:	00a494b3          	sll	s1,s1,a0
     8a2:	02854363          	blt	a0,s0,8c8 <__subsf3+0x324>
     8a6:	8d01                	sub	a0,a0,s0
     8a8:	0505                	addi	a0,a0,1
     8aa:	02000693          	li	a3,32
     8ae:	8e89                	sub	a3,a3,a0
     8b0:	00a4d7b3          	srl	a5,s1,a0
     8b4:	00d494b3          	sll	s1,s1,a3
     8b8:	009034b3          	snez	s1,s1
     8bc:	8fc5                	or	a5,a5,s1
     8be:	4401                	li	s0,0
     8c0:	bbc9                	j	692 <__subsf3+0xee>
     8c2:	f8e9                	bnez	s1,894 <__subsf3+0x2f0>
     8c4:	4401                	li	s0,0
     8c6:	b74d                	j	868 <__subsf3+0x2c4>
     8c8:	fc0007b7          	lui	a5,0xfc000
     8cc:	17fd                	addi	a5,a5,-1 # fbffffff <__global_pointer$+0xdbfff7ff>
     8ce:	8c09                	sub	s0,s0,a0
     8d0:	8fe5                	and	a5,a5,s1
     8d2:	b3c1                	j	692 <__subsf3+0xee>
     8d4:	87b2                	mv	a5,a2
     8d6:	bd41                	j	766 <__subsf3+0x1c2>
     8d8:	87b2                	mv	a5,a2
     8da:	bb65                	j	692 <__subsf3+0xee>
     8dc:	0037d493          	srli	s1,a5,0x3
     8e0:	0ff00793          	li	a5,255
     8e4:	d4f411e3          	bne	s0,a5,626 <__subsf3+0x82>
     8e8:	d2048fe3          	beqz	s1,626 <__subsf3+0x82>
     8ec:	004004b7          	lui	s1,0x400
     8f0:	bfa5                	j	868 <__subsf3+0x2c4>
     8f2:	0ff00413          	li	s0,255
     8f6:	4481                	li	s1,0
     8f8:	b33d                	j	626 <__subsf3+0x82>
     8fa:	4481                	li	s1,0
     8fc:	b7b5                	j	868 <__subsf3+0x2c4>

000008fe <__fixsfsi>:
     8fe:	00800637          	lui	a2,0x800
     902:	01755713          	srli	a4,a0,0x17
     906:	fff60793          	addi	a5,a2,-1 # 7fffff <rv003usb.c.4d2817cb+0x7fcfd5>
     90a:	0ff77713          	zext.b	a4,a4
     90e:	07e00593          	li	a1,126
     912:	8fe9                	and	a5,a5,a0
     914:	01f55693          	srli	a3,a0,0x1f
     918:	04e5d063          	bge	a1,a4,958 <__fixsfsi+0x5a>
     91c:	09d00593          	li	a1,157
     920:	00e5d863          	bge	a1,a4,930 <__fixsfsi+0x32>
     924:	80000537          	lui	a0,0x80000
     928:	fff54513          	not	a0,a0
     92c:	9536                	add	a0,a0,a3
     92e:	8082                	ret
     930:	00c7e533          	or	a0,a5,a2
     934:	09500793          	li	a5,149
     938:	00e7da63          	bge	a5,a4,94c <__fixsfsi+0x4e>
     93c:	f6a70713          	addi	a4,a4,-150 # 3ffff6a <rv003usb.c.4d2817cb+0x3ffcf40>
     940:	00e51533          	sll	a0,a0,a4
     944:	ca99                	beqz	a3,95a <__fixsfsi+0x5c>
     946:	40a00533          	neg	a0,a0
     94a:	8082                	ret
     94c:	09600793          	li	a5,150
     950:	8f99                	sub	a5,a5,a4
     952:	00f55533          	srl	a0,a0,a5
     956:	b7fd                	j	944 <__fixsfsi+0x46>
     958:	4501                	li	a0,0
     95a:	8082                	ret

0000095c <__floatsisf>:
     95c:	1151                	addi	sp,sp,-12
     95e:	c406                	sw	ra,8(sp)
     960:	c222                	sw	s0,4(sp)
     962:	c026                	sw	s1,0(sp)
     964:	c54d                	beqz	a0,a0e <__floatsisf+0xb2>
     966:	41f55793          	srai	a5,a0,0x1f
     96a:	00a7c433          	xor	s0,a5,a0
     96e:	8c1d                	sub	s0,s0,a5
     970:	01f55493          	srli	s1,a0,0x1f
     974:	8522                	mv	a0,s0
     976:	22c5                	jal	b56 <__clzsi2>
     978:	87aa                	mv	a5,a0
     97a:	09e00513          	li	a0,158
     97e:	8d1d                	sub	a0,a0,a5
     980:	09600713          	li	a4,150
     984:	02a74363          	blt	a4,a0,9aa <__floatsisf+0x4e>
     988:	4721                	li	a4,8
     98a:	08e78563          	beq	a5,a4,a14 <__floatsisf+0xb8>
     98e:	17e1                	addi	a5,a5,-8
     990:	00f41433          	sll	s0,s0,a5
     994:	0426                	slli	s0,s0,0x9
     996:	8025                	srli	s0,s0,0x9
     998:	055e                	slli	a0,a0,0x17
     99a:	40a2                	lw	ra,8(sp)
     99c:	8d41                	or	a0,a0,s0
     99e:	4412                	lw	s0,4(sp)
     9a0:	04fe                	slli	s1,s1,0x1f
     9a2:	8d45                	or	a0,a0,s1
     9a4:	4482                	lw	s1,0(sp)
     9a6:	0131                	addi	sp,sp,12
     9a8:	8082                	ret
     9aa:	09900713          	li	a4,153
     9ae:	04a75863          	bge	a4,a0,9fe <__floatsisf+0xa2>
     9b2:	4695                	li	a3,5
     9b4:	01b78713          	addi	a4,a5,27
     9b8:	00e41733          	sll	a4,s0,a4
     9bc:	8e9d                	sub	a3,a3,a5
     9be:	00d456b3          	srl	a3,s0,a3
     9c2:	00e03733          	snez	a4,a4
     9c6:	00e6e433          	or	s0,a3,a4
     9ca:	fc000737          	lui	a4,0xfc000
     9ce:	177d                	addi	a4,a4,-1 # fbffffff <__global_pointer$+0xdbfff7ff>
     9d0:	00747693          	andi	a3,s0,7
     9d4:	8f61                	and	a4,a4,s0
     9d6:	c691                	beqz	a3,9e2 <__floatsisf+0x86>
     9d8:	883d                	andi	s0,s0,15
     9da:	4691                	li	a3,4
     9dc:	00d40363          	beq	s0,a3,9e2 <__floatsisf+0x86>
     9e0:	0711                	addi	a4,a4,4
     9e2:	040006b7          	lui	a3,0x4000
     9e6:	8ef9                	and	a3,a3,a4
     9e8:	ca81                	beqz	a3,9f8 <__floatsisf+0x9c>
     9ea:	fc0006b7          	lui	a3,0xfc000
     9ee:	16fd                	addi	a3,a3,-1 # fbffffff <__global_pointer$+0xdbfff7ff>
     9f0:	09f00513          	li	a0,159
     9f4:	8f75                	and	a4,a4,a3
     9f6:	8d1d                	sub	a0,a0,a5
     9f8:	00375413          	srli	s0,a4,0x3
     9fc:	bf61                	j	994 <__floatsisf+0x38>
     9fe:	4695                	li	a3,5
     a00:	ffb78713          	addi	a4,a5,-5
     a04:	fcd783e3          	beq	a5,a3,9ca <__floatsisf+0x6e>
     a08:	00e41433          	sll	s0,s0,a4
     a0c:	bf7d                	j	9ca <__floatsisf+0x6e>
     a0e:	4481                	li	s1,0
     a10:	4401                	li	s0,0
     a12:	b749                	j	994 <__floatsisf+0x38>
     a14:	09600513          	li	a0,150
     a18:	bfb5                	j	994 <__floatsisf+0x38>

00000a1a <__floatunsisf>:
     a1a:	1151                	addi	sp,sp,-12
     a1c:	c222                	sw	s0,4(sp)
     a1e:	c406                	sw	ra,8(sp)
     a20:	842a                	mv	s0,a0
     a22:	4781                	li	a5,0
     a24:	cd19                	beqz	a0,a42 <__floatunsisf+0x28>
     a26:	2a05                	jal	b56 <__clzsi2>
     a28:	09e00793          	li	a5,158
     a2c:	8f89                	sub	a5,a5,a0
     a2e:	09600713          	li	a4,150
     a32:	02f74163          	blt	a4,a5,a54 <__floatunsisf+0x3a>
     a36:	4721                	li	a4,8
     a38:	08e50063          	beq	a0,a4,ab8 <__floatunsisf+0x9e>
     a3c:	1561                	addi	a0,a0,-8 # 7ffffff8 <__global_pointer$+0x5ffff7f8>
     a3e:	00a41433          	sll	s0,s0,a0
     a42:	0426                	slli	s0,s0,0x9
     a44:	8025                	srli	s0,s0,0x9
     a46:	01779513          	slli	a0,a5,0x17
     a4a:	40a2                	lw	ra,8(sp)
     a4c:	8d41                	or	a0,a0,s0
     a4e:	4412                	lw	s0,4(sp)
     a50:	0131                	addi	sp,sp,12
     a52:	8082                	ret
     a54:	09900713          	li	a4,153
     a58:	04f75863          	bge	a4,a5,aa8 <__floatunsisf+0x8e>
     a5c:	01b50693          	addi	a3,a0,27
     a60:	4715                	li	a4,5
     a62:	00d416b3          	sll	a3,s0,a3
     a66:	8f09                	sub	a4,a4,a0
     a68:	00d036b3          	snez	a3,a3
     a6c:	00e45733          	srl	a4,s0,a4
     a70:	00e6e433          	or	s0,a3,a4
     a74:	fc000737          	lui	a4,0xfc000
     a78:	177d                	addi	a4,a4,-1 # fbffffff <__global_pointer$+0xdbfff7ff>
     a7a:	00747693          	andi	a3,s0,7
     a7e:	8f61                	and	a4,a4,s0
     a80:	c691                	beqz	a3,a8c <__floatunsisf+0x72>
     a82:	883d                	andi	s0,s0,15
     a84:	4691                	li	a3,4
     a86:	00d40363          	beq	s0,a3,a8c <__floatunsisf+0x72>
     a8a:	0711                	addi	a4,a4,4
     a8c:	040006b7          	lui	a3,0x4000
     a90:	8ef9                	and	a3,a3,a4
     a92:	ca81                	beqz	a3,aa2 <__floatunsisf+0x88>
     a94:	fc0007b7          	lui	a5,0xfc000
     a98:	17fd                	addi	a5,a5,-1 # fbffffff <__global_pointer$+0xdbfff7ff>
     a9a:	8f7d                	and	a4,a4,a5
     a9c:	09f00793          	li	a5,159
     aa0:	8f89                	sub	a5,a5,a0
     aa2:	00375413          	srli	s0,a4,0x3
     aa6:	bf71                	j	a42 <__floatunsisf+0x28>
     aa8:	4695                	li	a3,5
     aaa:	ffb50713          	addi	a4,a0,-5
     aae:	fcd503e3          	beq	a0,a3,a74 <__floatunsisf+0x5a>
     ab2:	00e41433          	sll	s0,s0,a4
     ab6:	bf7d                	j	a74 <__floatunsisf+0x5a>
     ab8:	09600793          	li	a5,150
     abc:	b759                	j	a42 <__floatunsisf+0x28>
	...

00000ac0 <__mulsi3>:
     ac0:	862a                	mv	a2,a0
     ac2:	4501                	li	a0,0
     ac4:	0015f693          	andi	a3,a1,1
     ac8:	c291                	beqz	a3,acc <__mulsi3+0xc>
     aca:	9532                	add	a0,a0,a2
     acc:	8185                	srli	a1,a1,0x1
     ace:	0606                	slli	a2,a2,0x1
     ad0:	f9f5                	bnez	a1,ac4 <__mulsi3+0x4>
     ad2:	8082                	ret
     ad4:	0000                	unimp
	...

00000ad8 <__divsi3>:
     ad8:	02054e63          	bltz	a0,b14 <__umodsi3+0x8>
     adc:	0405c363          	bltz	a1,b22 <__umodsi3+0x16>

00000ae0 <__hidden___udivsi3>:
     ae0:	862e                	mv	a2,a1
     ae2:	85aa                	mv	a1,a0
     ae4:	557d                	li	a0,-1
     ae6:	c215                	beqz	a2,b0a <__hidden___udivsi3+0x2a>
     ae8:	4685                	li	a3,1
     aea:	00b67863          	bgeu	a2,a1,afa <__hidden___udivsi3+0x1a>
     aee:	00c05663          	blez	a2,afa <__hidden___udivsi3+0x1a>
     af2:	0606                	slli	a2,a2,0x1
     af4:	0686                	slli	a3,a3,0x1
     af6:	feb66ce3          	bltu	a2,a1,aee <__hidden___udivsi3+0xe>
     afa:	4501                	li	a0,0
     afc:	00c5e463          	bltu	a1,a2,b04 <__hidden___udivsi3+0x24>
     b00:	8d91                	sub	a1,a1,a2
     b02:	8d55                	or	a0,a0,a3
     b04:	8285                	srli	a3,a3,0x1
     b06:	8205                	srli	a2,a2,0x1
     b08:	faf5                	bnez	a3,afc <__hidden___udivsi3+0x1c>
     b0a:	8082                	ret

00000b0c <__umodsi3>:
     b0c:	8286                	mv	t0,ra
     b0e:	3fc9                	jal	ae0 <__hidden___udivsi3>
     b10:	852e                	mv	a0,a1
     b12:	8282                	jr	t0
     b14:	40a00533          	neg	a0,a0
     b18:	00b04763          	bgtz	a1,b26 <__umodsi3+0x1a>
     b1c:	40b005b3          	neg	a1,a1
     b20:	b7c1                	j	ae0 <__hidden___udivsi3>
     b22:	40b005b3          	neg	a1,a1
     b26:	8286                	mv	t0,ra
     b28:	3f65                	jal	ae0 <__hidden___udivsi3>
     b2a:	40a00533          	neg	a0,a0
     b2e:	8282                	jr	t0

00000b30 <__modsi3>:
     b30:	8286                	mv	t0,ra
     b32:	0005c763          	bltz	a1,b40 <__modsi3+0x10>
     b36:	00054963          	bltz	a0,b48 <__modsi3+0x18>
     b3a:	375d                	jal	ae0 <__hidden___udivsi3>
     b3c:	852e                	mv	a0,a1
     b3e:	8282                	jr	t0
     b40:	40b005b3          	neg	a1,a1
     b44:	fe055be3          	bgez	a0,b3a <__modsi3+0xa>
     b48:	40a00533          	neg	a0,a0
     b4c:	3f51                	jal	ae0 <__hidden___udivsi3>
     b4e:	40b00533          	neg	a0,a1
     b52:	8282                	jr	t0
	...

00000b56 <__clzsi2>:
     b56:	67c1                	lui	a5,0x10
     b58:	02f57563          	bgeu	a0,a5,b82 <__clzsi2+0x2c>
     b5c:	10053793          	sltiu	a5,a0,256
     b60:	0017c793          	xori	a5,a5,1
     b64:	078e                	slli	a5,a5,0x3
     b66:	6705                	lui	a4,0x1
     b68:	02000693          	li	a3,32
     b6c:	8e9d                	sub	a3,a3,a5
     b6e:	00f55533          	srl	a0,a0,a5
     b72:	50870793          	addi	a5,a4,1288 # 1508 <__clz_tab>
     b76:	97aa                	add	a5,a5,a0
     b78:	0007c503          	lbu	a0,0(a5) # 10000 <rv003usb.c.4d2817cb+0xcfd6>
     b7c:	40a68533          	sub	a0,a3,a0
     b80:	8082                	ret
     b82:	01000737          	lui	a4,0x1000
     b86:	47c1                	li	a5,16
     b88:	fce56fe3          	bltu	a0,a4,b66 <__clzsi2+0x10>
     b8c:	47e1                	li	a5,24
     b8e:	bfe1                	j	b66 <__clzsi2+0x10>

00000b90 <get_joystick_values>:
inline uint16_t gpio_analog_read(const GPIO_ANALOG_CHANNEL chan)
{
	// Set rule channel conversion for single conversion on passed channel
	// GPIO_ADC1->RSQR1 = 0;
	// GPIO_ADC1->RSQR2 = 0;
	GPIO_ADC1->RSQR3 = (uint32_t)chan;
     b90:	400127b7          	lui	a5,0x40012
     b94:	40078793          	addi	a5,a5,1024 # 40012400 <__global_pointer$+0x20011c00>
     b98:	dbc8                	sw	a0,52(a5)

	GPIO_ADC1->CTLR2 |= ADC_SWSTART;
     b9a:	4798                	lw	a4,8(a5)
     b9c:	004006b7          	lui	a3,0x400
     ba0:	8f55                	or	a4,a4,a3
     ba2:	c798                	sw	a4,8(a5)
	while(!(GPIO_ADC1->STATR & ADC_EOC));
     ba4:	4398                	lw	a4,0(a5)
     ba6:	8b09                	andi	a4,a4,2
     ba8:	df75                	beqz	a4,ba4 <get_joystick_values+0x14>

	// Get the resulting data from the ADC
	return GPIO_ADC1->RDATAR;
     baa:	47fc                	lw	a5,76(a5)
{
	// Get the current value directly from the ADC Channel
	axis->cur = gpio_analog_read(chan);

	// Adjust the ends of travel if they are exceeded
	if(axis->cur > axis->max)
     bac:	0025d703          	lhu	a4,2(a1) # 4000002 <rv003usb.c.4d2817cb+0x3ffcfd8>
     bb0:	07c2                	slli	a5,a5,0x10
     bb2:	83c1                	srli	a5,a5,0x10
	axis->cur = gpio_analog_read(chan);
     bb4:	00f59223          	sh	a5,4(a1)
	if(axis->cur > axis->max)
     bb8:	00f77563          	bgeu	a4,a5,bc2 <get_joystick_values+0x32>
		axis->max = axis->cur;
     bbc:	00f59123          	sh	a5,2(a1)
     bc0:	8082                	ret
	else if (axis->cur < axis->min)
     bc2:	0005d703          	lhu	a4,0(a1)
     bc6:	00e7f463          	bgeu	a5,a4,bce <get_joystick_values+0x3e>
		axis->min = axis->cur;
     bca:	00f59023          	sh	a5,0(a1)
}
     bce:	8082                	ret

00000bd0 <get_joystick_mapped>:
/// @brief maps the raw ADC joystick values to a new range between 
/// 0 and AXIS_MAXIMUM. Also applies deadzones
/// @param joystick_axis_t, axis to remap
/// @return none
void get_joystick_mapped(joystick_axis_t *axis)
{
     bd0:	1141                	addi	sp,sp,-16
     bd2:	c422                	sw	s0,8(sp)
     bd4:	c226                	sw	s1,4(sp)
     bd6:	842a                	mv	s0,a0
	// Overall process of linear mapping the ADC Values
	// float slope = 1.0 * (128 - (-128)) / (1024 - 0);
	// float output = -128 + slope * (input - 0) - 128;

	// Simplified Mapping the ADC Value into the new range
	const float slope = AXIS_MAP_OUTPUT_RANGE / AXIS_MAP_INPUT_RANGE;
     bd8:	00055483          	lhu	s1,0(a0)
     bdc:	00255503          	lhu	a0,2(a0)
{
     be0:	c606                	sw	ra,12(sp)
	const float slope = AXIS_MAP_OUTPUT_RANGE / AXIS_MAP_INPUT_RANGE;
     be2:	3bad                	jal	95c <__floatsisf>
     be4:	c02a                	sw	a0,0(sp)
     be6:	8526                	mv	a0,s1
     be8:	3d0d                	jal	a1a <__floatunsisf>
     bea:	85aa                	mv	a1,a0
     bec:	4502                	lw	a0,0(sp)
     bee:	3a5d                	jal	5a4 <__subsf3>
     bf0:	85aa                	mv	a1,a0
     bf2:	8181a503          	lw	a0,-2024(gp) # 20000018 <g_axis_rot+0x8>
     bf6:	caaff0ef          	jal	a0 <__divsf3>
     bfa:	c02a                	sw	a0,0(sp)
	axis->mapped = slope * (axis->cur - axis->min) - AXIS_MAP_MAXIMUM;
     bfc:	00445503          	lhu	a0,4(s0)
     c00:	8d05                	sub	a0,a0,s1
     c02:	3ba9                	jal	95c <__floatsisf>
     c04:	85aa                	mv	a1,a0
     c06:	4502                	lw	a0,0(sp)
     c08:	f38ff0ef          	jal	340 <__mulsf3>
     c0c:	81c1a583          	lw	a1,-2020(gp) # 2000001c <g_axis_rot+0xc>
     c10:	3a51                	jal	5a4 <__subsf3>
     c12:	31f5                	jal	8fe <__fixsfsi>
     c14:	0562                	slli	a0,a0,0x18
     c16:	8561                	srai	a0,a0,0x18

	// Apply deadzone checks
	if(axis->mapped >= AXIS_HYST_FLOOR && axis->mapped <= AXIS_HYST_CEIL)
     c18:	00f50713          	addi	a4,a0,15
     c1c:	0ff77713          	zext.b	a4,a4
     c20:	46f9                	li	a3,30
     c22:	00e6e363          	bltu	a3,a4,c28 <get_joystick_mapped+0x58>
		axis->mapped = AXIS_HYST_MIDL;
     c26:	4501                	li	a0,0
     c28:	00a40323          	sb	a0,6(s0)
}
     c2c:	40b2                	lw	ra,12(sp)
     c2e:	4422                	lw	s0,8(sp)
     c30:	4492                	lw	s1,4(sp)
     c32:	0141                	addi	sp,sp,16
     c34:	8082                	ret

00000c36 <gpio_set_mode>:
	GPIO_RCC->APB2PCENR |= (RCC_APB2PCENR_AFIO | (RCC_APB2PCENR_IOPxEN << byte[0]));
     c36:	400216b7          	lui	a3,0x40021
     c3a:	4e90                	lw	a2,24(a3)
     c3c:	4791                	li	a5,4
     c3e:	00a797b3          	sll	a5,a5,a0
     c42:	8fd1                	or	a5,a5,a2
     c44:	0017e793          	ori	a5,a5,1
     c48:	ce9c                	sw	a5,24(a3)
     c4a:	0ff57713          	zext.b	a4,a0
	GPIO_PORT_MAP[ byte[0] ]->CFGLR &=        ~(0x0F  << (4 * byte[1]));
     c4e:	6785                	lui	a5,0x1
     c50:	070a                	slli	a4,a4,0x2
     c52:	6cc78793          	addi	a5,a5,1740 # 16cc <GPIO_PORT_MAP>
     c56:	97ba                	add	a5,a5,a4
     c58:	4398                	lw	a4,0(a5)
     c5a:	8121                	srli	a0,a0,0x8
     c5c:	0ff57513          	zext.b	a0,a0
     c60:	4310                	lw	a2,0(a4)
     c62:	00251693          	slli	a3,a0,0x2
     c66:	47bd                	li	a5,15
     c68:	00d797b3          	sll	a5,a5,a3
     c6c:	fff7c793          	not	a5,a5
     c70:	8ff1                	and	a5,a5,a2
     c72:	c31c                	sw	a5,0(a4)
	GPIO_PORT_MAP[ byte[0] ]->CFGLR |=  (mode & 0x0F) << (4 * byte[1]);
     c74:	4310                	lw	a2,0(a4)
     c76:	00f5f793          	andi	a5,a1,15
     c7a:	00d797b3          	sll	a5,a5,a3
     c7e:	8fd1                	or	a5,a5,a2
     c80:	c31c                	sw	a5,0(a4)
	if(mode == INPUT_PULLUP || mode == INPUT_PULLDOWN)
     c82:	fef5f693          	andi	a3,a1,-17
     c86:	47a1                	li	a5,8
     c88:	00f69963          	bne	a3,a5,c9a <gpio_set_mode+0x64>
	uint32_t mask = 0x01 << byte[1];          // Shift by pin number
     c8c:	4785                	li	a5,1
		gpio_digital_write(pin, mode >> 4);
     c8e:	8191                	srli	a1,a1,0x4
	uint32_t mask = 0x01 << byte[1];          // Shift by pin number
     c90:	00a797b3          	sll	a5,a5,a0
	if(state == GPIO_LOW) mask = mask << 16;  // Shift by 16 if LOW, to Reset
     c94:	e191                	bnez	a1,c98 <gpio_set_mode+0x62>
     c96:	07c2                	slli	a5,a5,0x10
	GPIO_PORT_MAP[ byte[0] ]->BSHR = mask;
     c98:	cb1c                	sw	a5,16(a4)
}
     c9a:	8082                	ret

00000c9c <handle_reset>:
     c9c:	20000197          	auipc	gp,0x20000
     ca0:	b6418193          	addi	gp,gp,-1180 # 20000800 <__global_pointer$>
     ca4:	00018113          	mv	sp,gp
     ca8:	08000513          	li	a0,128
     cac:	30051073          	csrw	mstatus,a0
     cb0:	468d                	li	a3,3
     cb2:	fffff517          	auipc	a0,0xfffff
     cb6:	34e50513          	addi	a0,a0,846 # 0 <InterruptVector>
     cba:	8d55                	or	a0,a0,a3
     cbc:	30551073          	csrw	mtvec,a0
     cc0:	82018513          	addi	a0,gp,-2016 # 20000020 <g_button_mask>
     cc4:	88018593          	addi	a1,gp,-1920 # 20000080 <_ebss>
     cc8:	4601                	li	a2,0
     cca:	00b55663          	bge	a0,a1,cd6 <handle_reset+0x3a>
     cce:	c110                	sw	a2,0(a0)
     cd0:	0511                	addi	a0,a0,4
     cd2:	feb54ee3          	blt	a0,a1,cce <handle_reset+0x32>
     cd6:	00001517          	auipc	a0,0x1
     cda:	a0650513          	addi	a0,a0,-1530 # 16dc <_data_lma>
     cde:	1ffff597          	auipc	a1,0x1ffff
     ce2:	32258593          	addi	a1,a1,802 # 20000000 <g_axis_ver>
     ce6:	82018613          	addi	a2,gp,-2016 # 20000020 <g_button_mask>
     cea:	00c58863          	beq	a1,a2,cfa <handle_reset+0x5e>
     cee:	4114                	lw	a3,0(a0)
     cf0:	c194                	sw	a3,0(a1)
     cf2:	0511                	addi	a0,a0,4
     cf4:	0591                	addi	a1,a1,4
     cf6:	fec59ae3          	bne	a1,a2,cea <handle_reset+0x4e>
     cfa:	e000f7b7          	lui	a5,0xe000f
     cfe:	4715                	li	a4,5
     d00:	c398                	sw	a4,0(a5)
     d02:	6785                	lui	a5,0x1
     d04:	d8278793          	addi	a5,a5,-638 # d82 <main>
     d08:	34179073          	csrw	mepc,a5
     d0c:	30200073          	mret

00000d10 <ADC1_IRQHandler>:
     d10:	a001                	j	d10 <ADC1_IRQHandler>

00000d12 <NMI_Handler>:
     d12:	40021737          	lui	a4,0x40021
     d16:	471c                	lw	a5,8(a4)
     d18:	008006b7          	lui	a3,0x800
     d1c:	8fd5                	or	a5,a5,a3
     d1e:	c71c                	sw	a5,8(a4)

00000d20 <SystemInit>:
     d20:	400227b7          	lui	a5,0x40022
     d24:	4705                	li	a4,1
     d26:	c398                	sw	a4,0(a5)
     d28:	400217b7          	lui	a5,0x40021
     d2c:	01080737          	lui	a4,0x1080
     d30:	0007a223          	sw	zero,4(a5) # 40021004 <__global_pointer$+0x20020804>
     d34:	08170713          	addi	a4,a4,129 # 1080081 <rv003usb.c.4d2817cb+0x107d057>
     d38:	c398                	sw	a4,0(a5)
     d3a:	009f0737          	lui	a4,0x9f0
     d3e:	c798                	sw	a4,8(a5)
     d40:	40021737          	lui	a4,0x40021
     d44:	431c                	lw	a5,0(a4)
     d46:	00679693          	slli	a3,a5,0x6
     d4a:	fe06dde3          	bgez	a3,d44 <SystemInit+0x24>
     d4e:	435c                	lw	a5,4(a4)
     d50:	400216b7          	lui	a3,0x40021
     d54:	9bf1                	andi	a5,a5,-4
     d56:	0027e793          	ori	a5,a5,2
     d5a:	c35c                	sw	a5,4(a4)
     d5c:	4721                	li	a4,8
     d5e:	42dc                	lw	a5,4(a3)
     d60:	8bb1                	andi	a5,a5,12
     d62:	fee79ee3          	bne	a5,a4,d5e <SystemInit+0x3e>
     d66:	e00007b7          	lui	a5,0xe0000
     d6a:	0f878793          	addi	a5,a5,248 # e00000f8 <__global_pointer$+0xbffff8f8>
     d6e:	0007a023          	sw	zero,0(a5)
     d72:	e00007b7          	lui	a5,0xe0000
     d76:	0f478793          	addi	a5,a5,244 # e00000f4 <__global_pointer$+0xbffff8f4>
     d7a:	08000713          	li	a4,128
     d7e:	c398                	sw	a4,0(a5)
     d80:	8082                	ret

00000d82 <main>:


/*** Main ********************************************************************/
int main()
{
     d82:	1151                	addi	sp,sp,-12
     d84:	c406                	sw	ra,8(sp)
     d86:	c222                	sw	s0,4(sp)
     d88:	c026                	sw	s1,0(sp)
	SystemInit();
     d8a:	3f59                	jal	d20 <SystemInit>
#endif

void DelaySysTick( uint32_t n )
{
#ifdef CH32V003
	uint32_t targend = SysTick->CNT + n;
     d8c:	e000f7b7          	lui	a5,0xe000f
     d90:	4798                	lw	a4,8(a5)
     d92:	67b1                	lui	a5,0xc
     d94:	b8078793          	addi	a5,a5,-1152 # bb80 <rv003usb.c.4d2817cb+0x8b56>
     d98:	973e                	add	a4,a4,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     d9a:	e000f6b7          	lui	a3,0xe000f
     d9e:	469c                	lw	a5,8(a3)
     da0:	8f99                	sub	a5,a5,a4
     da2:	fe07cee3          	bltz	a5,d9e <main+0x1c>
#define LOCAL_CONCAT(A, B) A##B
#define LOCAL_EXP(A, B) LOCAL_CONCAT(A,B)

void usb_setup()
{
	rv003usb_internal_data.se0_windup = 0;
     da6:	200007b7          	lui	a5,0x20000

	// Enable GPIOs, TIMERs
	RCC->APB2PCENR |= LOCAL_EXP( RCC_APB2Periph_GPIO, USB_PORT ) | RCC_APB2Periph_AFIO;
     daa:	40021437          	lui	s0,0x40021
	rv003usb_internal_data.se0_windup = 0;
     dae:	0207ae23          	sw	zero,60(a5) # 2000003c <rv003usb_internal_data+0x18>
	RCC->APB2PCENR |= LOCAL_EXP( RCC_APB2Periph_GPIO, USB_PORT ) | RCC_APB2Periph_AFIO;
     db2:	4c1c                	lw	a5,24(s0)
	}
#endif

	// GPIO Setup
	LOCAL_EXP( GPIO, USB_PORT )->CFGLR = 
		( LOCAL_EXP( GPIO, USB_PORT )->CFGLR & 
     db4:	fff006b7          	lui	a3,0xfff00
     db8:	0ff68693          	addi	a3,a3,255 # fff000ff <__global_pointer$+0xdfeff8ff>
	RCC->APB2PCENR |= LOCAL_EXP( RCC_APB2Periph_GPIO, USB_PORT ) | RCC_APB2Periph_AFIO;
     dbc:	0217e793          	ori	a5,a5,33
     dc0:	cc1c                	sw	a5,24(s0)
		( LOCAL_EXP( GPIO, USB_PORT )->CFGLR & 
     dc2:	400117b7          	lui	a5,0x40011
     dc6:	40078793          	addi	a5,a5,1024 # 40011400 <__global_pointer$+0x20010c00>
     dca:	4398                	lw	a4,0(a5)
	// Ensures USB re-numeration after bootloader or reset
	Delay_Ms(1);
	usb_setup();

	// Handedness Switch is a floating input
	gpio_set_mode(SW_HANDEDNESS, INPUT_FLOATING);
     dcc:	4591                	li	a1,4
     dce:	4509                	li	a0,2
     dd0:	8f75                	and	a4,a4,a3
			) )) )
		 |
#ifdef USB_PIN_DPU
		(GPIO_Speed_50MHz | GPIO_CNF_OUT_PP)<<(4*USB_PIN_DPU) |
#endif
		(GPIO_Speed_In | GPIO_CNF_IN_PUPD)<<(4*USB_PIN_DP) | 
     dd2:	000886b7          	lui	a3,0x88
     dd6:	30068693          	addi	a3,a3,768 # 88300 <rv003usb.c.4d2817cb+0x852d6>
     dda:	8f55                	or	a4,a4,a3
	LOCAL_EXP( GPIO, USB_PORT )->CFGLR = 
     ddc:	c398                	sw	a4,0(a5)
		(GPIO_Speed_In | GPIO_CNF_IN_PUPD)<<(4*USB_PIN_DM);

	// Configure USB_PIN_DM (D-) as an interrupt on falling edge.
	AFIO->EXTICR = LOCAL_EXP(GPIO_PortSourceGPIO,USB_PORT)<<(USB_PIN_DM*2); // Configure EXTI interrupt for USB_PIN_DM
     dde:	0c000693          	li	a3,192
     de2:	40010737          	lui	a4,0x40010
     de6:	c714                	sw	a3,8(a4)
	EXTI->INTENR = 1<<USB_PIN_DM; // Enable EXTI interrupt
     de8:	46a1                	li	a3,8
     dea:	40070713          	addi	a4,a4,1024 # 40010400 <__global_pointer$+0x2000fc00>
     dee:	c314                	sw	a3,0(a4)
	EXTI->FTENR = 1<<USB_PIN_DM;  // Enable falling edge trigger for USB_PIN_DM (D-)
     df0:	c754                	sw	a3,12(a4)

#ifdef USB_PIN_DPU
	// This drives USB_PIN_DPU (D- Pull-Up) high, which will tell the host that we are going on-bus.
	LOCAL_EXP(GPIO,USB_PORT)->BSHR = 1<<USB_PIN_DPU;
     df2:	4711                	li	a4,4
     df4:	cb98                	sw	a4,16(a5)
 *
 * @return  none
 */
RV_STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     df6:	e000e7b7          	lui	a5,0xe000e
     dfa:	00100737          	lui	a4,0x100
     dfe:	10e7a023          	sw	a4,256(a5) # e000e100 <__global_pointer$+0xc000d900>
     e02:	3d15                	jal	c36 <gpio_set_mode>

	// All Buttons are digital input, pulled HIGH
	gpio_set_mode(BTN_JST_PIN,   INPUT_PULLUP);
     e04:	45e1                	li	a1,24
     e06:	50300513          	li	a0,1283
     e0a:	3535                	jal	c36 <gpio_set_mode>
	gpio_set_mode(BTN_AUX_1_PIN, INPUT_PULLUP);
     e0c:	45e1                	li	a1,24
     e0e:	40200513          	li	a0,1026
     e12:	3515                	jal	c36 <gpio_set_mode>
	gpio_set_mode(BTN_AUX_2_PIN, INPUT_PULLUP);
     e14:	45e1                	li	a1,24
     e16:	30200513          	li	a0,770
     e1a:	3d31                	jal	c36 <gpio_set_mode>
	gpio_set_mode(BTN_AUX_3_PIN, INPUT_PULLUP);
     e1c:	45e1                	li	a1,24
     e1e:	20200513          	li	a0,514
     e22:	3d11                	jal	c36 <gpio_set_mode>
	gpio_set_mode(BTN_AUX_4_PIN, INPUT_PULLUP);
     e24:	45e1                	li	a1,24
     e26:	10200513          	li	a0,258
     e2a:	3531                	jal	c36 <gpio_set_mode>

	// All Axes are analog input
	gpio_set_mode(GPIO_A1, INPUT_ANALOG);  // Horizontal
     e2c:	4581                	li	a1,0
     e2e:	10000513          	li	a0,256
     e32:	3511                	jal	c36 <gpio_set_mode>
	gpio_set_mode(GPIO_A0, INPUT_ANALOG);  // Vertical
     e34:	4581                	li	a1,0
     e36:	20000513          	li	a0,512
     e3a:	3bf5                	jal	c36 <gpio_set_mode>
	gpio_set_mode(GPIO_A6, INPUT_ANALOG);  // Rotation
     e3c:	4581                	li	a1,0
     e3e:	60300513          	li	a0,1539
     e42:	3bd5                	jal	c36 <gpio_set_mode>
	GPIO_RCC->APB2PCENR |= RCC_APB2Periph_ADC1;
     e44:	4c1c                	lw	a5,24(s0)
	GPIO_RCC->CFGR0 &= ~ADC_CLOCK_DIV_128;
     e46:	7741                	lui	a4,0xffff0
     e48:	7ff70713          	addi	a4,a4,2047 # ffff07ff <__global_pointer$+0xdffeffff>
	GPIO_RCC->APB2PCENR |= RCC_APB2Periph_ADC1;
     e4c:	2007e793          	ori	a5,a5,512
     e50:	cc1c                	sw	a5,24(s0)
	GPIO_RCC->CFGR0 &= ~ADC_CLOCK_DIV_128;
     e52:	405c                	lw	a5,4(s0)
	GPIO_ADC1->CTLR2 |= ADC_ADON | ADC_EXTSEL;
     e54:	000e06b7          	lui	a3,0xe0
     e58:	0685                	addi	a3,a3,1 # e0001 <rv003usb.c.4d2817cb+0xdcfd7>
	GPIO_RCC->CFGR0 &= ~ADC_CLOCK_DIV_128;
     e5a:	8ff9                	and	a5,a5,a4
     e5c:	c05c                	sw	a5,4(s0)
	GPIO_RCC->CFGR0 |= div;
     e5e:	405c                	lw	a5,4(s0)
	GPIO_ADC1->SAMPTR1 = cycles;
     e60:	36db7737          	lui	a4,0x36db7
     e64:	db670713          	addi	a4,a4,-586 # 36db6db6 <__global_pointer$+0x16db65b6>
	GPIO_RCC->CFGR0 |= div;
     e68:	c05c                	sw	a5,4(s0)
	GPIO_RCC->APB2PRSTR |=  RCC_APB2Periph_ADC1;
     e6a:	445c                	lw	a5,12(s0)
     e6c:	2007e793          	ori	a5,a5,512
     e70:	c45c                	sw	a5,12(s0)
	GPIO_RCC->APB2PRSTR &= ~RCC_APB2Periph_ADC1;
     e72:	445c                	lw	a5,12(s0)
     e74:	dff7f793          	andi	a5,a5,-513
     e78:	c45c                	sw	a5,12(s0)
	GPIO_ADC1->RSQR1 = 0;
     e7a:	400127b7          	lui	a5,0x40012
     e7e:	40078793          	addi	a5,a5,1024 # 40012400 <__global_pointer$+0x20011c00>
     e82:	0207a623          	sw	zero,44(a5)
	GPIO_ADC1->RSQR2 = 0;
     e86:	0207a823          	sw	zero,48(a5)
	GPIO_ADC1->RSQR3 = 0;
     e8a:	0207aa23          	sw	zero,52(a5)
	GPIO_ADC1->SAMPTR1 = cycles;
     e8e:	c7d8                	sw	a4,12(a5)
	GPIO_ADC1->SAMPTR2 = cycles;
     e90:	cb98                	sw	a4,16(a5)
	GPIO_ADC1->CTLR2 |= ADC_ADON | ADC_EXTSEL;
     e92:	4798                	lw	a4,8(a5)
     e94:	8f55                	or	a4,a4,a3
     e96:	c798                	sw	a4,8(a5)
	GPIO_ADC1->CTLR2 |= ADC_RSTCAL;
     e98:	4798                	lw	a4,8(a5)
     e9a:	00876713          	ori	a4,a4,8
     e9e:	c798                	sw	a4,8(a5)
	while(GPIO_ADC1->CTLR2 & ADC_RSTCAL);
     ea0:	4798                	lw	a4,8(a5)
     ea2:	8b21                	andi	a4,a4,8
     ea4:	ff75                	bnez	a4,ea0 <main+0x11e>
	if( (GPIO_PORT_MAP[ byte[0] ]->INDR & (0x01 << byte[1])) != 0x00 ) 
     ea6:	400117b7          	lui	a5,0x40011
     eaa:	400114b7          	lui	s1,0x40011
     eae:	40078793          	addi	a5,a5,1024 # 40011400 <__global_pointer$+0x20010c00>
     eb2:	478c                	lw	a1,8(a5)
     eb4:	4490                	lw	a2,8(s1)
     eb6:	449c                	lw	a5,8(s1)
     eb8:	4494                	lw	a3,8(s1)
     eba:	8211                	srli	a2,a2,0x4
     ebc:	4498                	lw	a4,8(s1)
     ebe:	838d                	srli	a5,a5,0x3
     ec0:	0017c793          	xori	a5,a5,1
     ec4:	00164613          	xori	a2,a2,1
     ec8:	8b85                	andi	a5,a5,1
     eca:	8a05                	andi	a2,a2,1

	// Loop forever getting joystick data
	while(1)
	{
		// Read the buttons state(s). Invert them as they are PULLUP
		g_button_mask = 0x00                          |
     ecc:	8195                	srli	a1,a1,0x5
     ece:	8289                	srli	a3,a3,0x2
     ed0:	0606                	slli	a2,a2,0x1
     ed2:	078a                	slli	a5,a5,0x2
     ed4:	0015c593          	xori	a1,a1,1
     ed8:	0016c693          	xori	a3,a3,1
     edc:	8305                	srli	a4,a4,0x1
			(!gpio_digital_read(BTN_JST_PIN))         |
			(!gpio_digital_read(BTN_AUX_1_PIN) << 1)  |
			(!gpio_digital_read(BTN_AUX_2_PIN) << 2)  |
			(!gpio_digital_read(BTN_AUX_3_PIN) << 3)  |
     ede:	8fd1                	or	a5,a5,a2
		g_button_mask = 0x00                          |
     ee0:	8985                	andi	a1,a1,1
     ee2:	8a85                	andi	a3,a3,1
     ee4:	00174713          	xori	a4,a4,1
     ee8:	068e                	slli	a3,a3,0x3
			(!gpio_digital_read(BTN_AUX_3_PIN) << 3)  |
     eea:	8fcd                	or	a5,a5,a1
     eec:	8b05                	andi	a4,a4,1
     eee:	8fd5                	or	a5,a5,a3
     ef0:	0712                	slli	a4,a4,0x4
     ef2:	8fd9                	or	a5,a5,a4
			(!gpio_digital_read(BTN_AUX_4_PIN) << 4);
	

		// Read the potentiometer values
		get_joystick_values(AXIS_ROT_PIN, &g_axis_rot);
     ef4:	81018593          	addi	a1,gp,-2032 # 20000010 <g_axis_rot>
     ef8:	4519                	li	a0,6
		g_button_mask = 0x00                          |
     efa:	82f18023          	sb	a5,-2016(gp) # 20000020 <g_button_mask>
		get_joystick_values(AXIS_ROT_PIN, &g_axis_rot);
     efe:	3949                	jal	b90 <get_joystick_values>
		get_joystick_values(AXIS_HOR_PIN, &g_axis_hor);
     f00:	200006b7          	lui	a3,0x20000
     f04:	00868593          	addi	a1,a3,8 # 20000008 <g_axis_hor>
     f08:	4505                	li	a0,1
     f0a:	3159                	jal	b90 <get_joystick_values>
		get_joystick_values(AXIS_VER_PIN, &g_axis_ver);
     f0c:	20000437          	lui	s0,0x20000
     f10:	00040593          	mv	a1,s0
     f14:	4501                	li	a0,0
     f16:	39ad                	jal	b90 <get_joystick_values>
     f18:	449c                	lw	a5,8(s1)
     f1a:	200006b7          	lui	a3,0x20000
     f1e:	8b85                	andi	a5,a5,1
     f20:	eb8d                	bnez	a5,f52 <main+0x1d0>
		// Invert Horizontal and Vertical values if the Handedness switch reads
		// RIGHT_HANDED_MODE (0). 
		// Do nothing if Switch is in LEFT_HANDED_MODE (1) (default)
		if((handedness_t)gpio_digital_read(SW_HANDEDNESS) == RIGHT_HANDED_MODE)
		{
			g_axis_hor.cur = (g_axis_hor.max - g_axis_hor.cur) + g_axis_hor.min;
     f22:	00868593          	addi	a1,a3,8 # 20000008 <g_axis_hor>
     f26:	0005d503          	lhu	a0,0(a1)
     f2a:	0025d783          	lhu	a5,2(a1)
     f2e:	97aa                	add	a5,a5,a0
     f30:	0045d503          	lhu	a0,4(a1)
     f34:	8f89                	sub	a5,a5,a0
     f36:	00f59223          	sh	a5,4(a1)
			g_axis_ver.cur = (g_axis_ver.max - g_axis_ver.cur) + g_axis_ver.min;
     f3a:	00040593          	mv	a1,s0
     f3e:	0005d503          	lhu	a0,0(a1)
     f42:	0025d783          	lhu	a5,2(a1)
     f46:	97aa                	add	a5,a5,a0
     f48:	0045d503          	lhu	a0,4(a1)
     f4c:	8f89                	sub	a5,a5,a0
     f4e:	00f59223          	sh	a5,4(a1)
		}


		// Map the analog values to -128 to 127
		get_joystick_mapped(&g_axis_rot);
     f52:	81018513          	addi	a0,gp,-2032 # 20000010 <g_axis_rot>
     f56:	39ad                	jal	bd0 <get_joystick_mapped>
		get_joystick_mapped(&g_axis_hor);
     f58:	200006b7          	lui	a3,0x20000
     f5c:	00868513          	addi	a0,a3,8 # 20000008 <g_axis_hor>
     f60:	3985                	jal	bd0 <get_joystick_mapped>
		get_joystick_mapped(&g_axis_ver);
     f62:	00040513          	mv	a0,s0
     f66:	31ad                	jal	bd0 <get_joystick_mapped>
	uint32_t targend = SysTick->CNT + n;
     f68:	e000f7b7          	lui	a5,0xe000f
     f6c:	4798                	lw	a4,8(a5)
     f6e:	000ea7b7          	lui	a5,0xea
     f72:	60078793          	addi	a5,a5,1536 # ea600 <rv003usb.c.4d2817cb+0xe75d6>
     f76:	973e                	add	a4,a4,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     f78:	e000f6b7          	lui	a3,0xe000f
     f7c:	469c                	lw	a5,8(a3)
     f7e:	8f99                	sub	a5,a5,a4
     f80:	fe07cee3          	bltz	a5,f7c <main+0x1fa>
     f84:	b70d                	j	ea6 <main+0x124>

00000f86 <usb_pid_handle_in>:
	ist->current_endpoint = endp;
	struct usb_endpoint * e = &ist->eps[endp];

	int tosend = 0;
	uint8_t * sendnow;
	int sendtok = e->toggle_in?0b01001011:0b11000011;
     f86:	00561793          	slli	a5,a2,0x5
     f8a:	00f706b3          	add	a3,a4,a5
	ist->current_endpoint = endp;
     f8e:	c310                	sw	a2,0(a4)
	int sendtok = e->toggle_in?0b01001011:0b11000011;
     f90:	528c                	lw	a1,32(a3)
     f92:	04b00693          	li	a3,75
     f96:	e199                	bnez	a1,f9c <usb_pid_handle_in+0x16>
     f98:	0c300693          	li	a3,195

#if RV003USB_HANDLE_IN_REQUEST
	if( e->custom || endp )
     f9c:	97ba                	add	a5,a5,a4
     f9e:	579c                	lw	a5,40(a5)
     fa0:	eb9d                	bnez	a5,fd6 <usb_pid_handle_in+0x50>
     fa2:	ce0d                	beqz	a2,fdc <usb_pid_handle_in+0x56>
	// If this endpoint is the one we want:
	if(endp)
	{
		// Create a buffer to send to the USB Host, using the Axis and Button
		// variables
		const uint8_t joystick_data[4] = {
     fa4:	80e1c783          	lbu	a5,-2034(gp) # 2000000e <g_axis_hor+0x6>
{
     fa8:	1141                	addi	sp,sp,-16
			g_button_mask
		};

		// Send that buffer to the USB Host
		// (4 bytes, CRC Enabled, using send token)
		usb_send_data(joystick_data, 4, 0, sendtok);
     faa:	850a                	mv	a0,sp
		const uint8_t joystick_data[4] = {
     fac:	00f10023          	sb	a5,0(sp)
     fb0:	8061c783          	lbu	a5,-2042(gp) # 20000006 <g_axis_ver+0x6>
		usb_send_data(joystick_data, 4, 0, sendtok);
     fb4:	4601                	li	a2,0
     fb6:	4591                	li	a1,4
		const uint8_t joystick_data[4] = {
     fb8:	00f100a3          	sb	a5,1(sp)
     fbc:	8161c783          	lbu	a5,-2026(gp) # 20000016 <g_axis_rot+0x6>
     fc0:	c606                	sw	ra,12(sp)
     fc2:	00f10123          	sb	a5,2(sp)
     fc6:	8201c783          	lbu	a5,-2016(gp) # 20000020 <g_button_mask>
     fca:	00f101a3          	sb	a5,3(sp)
		usb_send_data(joystick_data, 4, 0, sendtok);
     fce:	2661                	jal	1356 <usb_send_data>
	}
	else
	{
		usb_send_data( sendnow, tosend, 0, sendtok );
	}
}
     fd0:	40b2                	lw	ra,12(sp)
     fd2:	0141                	addi	sp,sp,16
     fd4:	8082                	ret
	if(endp)
     fd6:	f679                	bnez	a2,fa4 <usb_pid_handle_in+0x1e>
		usb_send_empty( sendtok );
     fd8:	8536                	mv	a0,a3
     fda:	a6bd                	j	1348 <usb_send_empty>
	int offset = (e->count)<<3;
     fdc:	4f5c                	lw	a5,28(a4)
	tosend = (int)e->max_len - offset;
     fde:	574c                	lw	a1,44(a4)
	uint8_t * tsend = e->opaque;
     fe0:	5f08                	lw	a0,56(a4)
	int offset = (e->count)<<3;
     fe2:	078e                	slli	a5,a5,0x3
	tosend = (int)e->max_len - offset;
     fe4:	8d9d                	sub	a1,a1,a5
	if( tosend <= 0 )
     fe6:	feb059e3          	blez	a1,fd8 <usb_pid_handle_in+0x52>
	if( tosend > ENDPOINT0_SIZE ) tosend = ENDPOINT0_SIZE;
     fea:	4721                	li	a4,8
     fec:	00b75363          	bge	a4,a1,ff2 <usb_pid_handle_in+0x6c>
     ff0:	45a1                	li	a1,8
		usb_send_data( sendnow, tosend, 0, sendtok );
     ff2:	4601                	li	a2,0
     ff4:	953e                	add	a0,a0,a5
     ff6:	a685                	j	1356 <usb_send_data>

00000ff8 <usb_pid_handle_data>:
}

void usb_pid_handle_data( uint32_t this_token, uint8_t * data, uint32_t which_data, uint32_t length, struct rv003usb_internal * ist )
{
	//Received data from host.
	int epno = ist->current_endpoint;
     ff8:	431c                	lw	a5,0(a4)

	length -= 3;
	uint8_t * data_in = __builtin_assume_aligned( data, 4 );

	// Already received this packet.
	if( e->toggle_out != which_data )
     ffa:	0796                	slli	a5,a5,0x5
     ffc:	97ba                	add	a5,a5,a4
     ffe:	53d4                	lw	a3,36(a5)
    1000:	06c69a63          	bne	a3,a2,1074 <usb_pid_handle_data+0x7c>
	{
		goto just_ack;
	}

	e->toggle_out = !e->toggle_out;
    1004:	0016b693          	seqz	a3,a3
    1008:	d3d4                	sw	a3,36(a5)
#endif
	}
	else
#endif

	if( ist->setup_request )
    100a:	4714                	lw	a3,8(a4)
    100c:	c6a5                	beqz	a3,1074 <usb_pid_handle_data+0x7c>
		}
#endif

		struct usb_urb * s = __builtin_assume_aligned( (struct usb_urb *)(data_in), 4 );

		uint32_t wvi = s->lValueLSBIndexMSB;
    100e:	0045d683          	lhu	a3,4(a1)
    1012:	0025d603          	lhu	a2,2(a1)
		uint32_t wLength = s->wLength;
    1016:	0065d503          	lhu	a0,6(a1)
		uint32_t wvi = s->lValueLSBIndexMSB;
    101a:	06c2                	slli	a3,a3,0x10
    101c:	8ed1                	or	a3,a3,a2
		//int bRequest = s->wRequestTypeLSBRequestMSB >> 8;

		// We shift down because we don't care if USB_RECIP_INTERFACE is set or not.
		// Otherwise we have to write extra code to handle each case if it's set or
		// not set, but in general, there's never a situation where we really care.
		uint32_t reqShl = s->wRequestTypeLSBRequestMSB >> 1;
    101e:	0005d603          	lhu	a2,0(a1)
		e->count = 0;
    1022:	0007ae23          	sw	zero,28(a5)
		e->opaque = 0;
    1026:	0207ac23          	sw	zero,56(a5)
		e->custom = 0;
    102a:	0207a423          	sw	zero,40(a5)
		e->max_len = 0;
    102e:	0207a623          	sw	zero,44(a5)
		ist->setup_request = 0;
    1032:	00072423          	sw	zero,8(a4)
		uint32_t reqShl = s->wRequestTypeLSBRequestMSB >> 1;
    1036:	8205                	srli	a2,a2,0x1
			// Class request (Will be writing)  This is hid_send_feature_report
			usb_handle_hid_set_report_start( e, wLength, wvi );
		}
		else
#endif
		if( reqShl == (0x0680>>1) ) // GET_DESCRIPTOR = 6 (msb)
    1038:	34000593          	li	a1,832
    103c:	04b61263          	bne	a2,a1,1080 <usb_pid_handle_data+0x88>
    1040:	6705                	lui	a4,0x1
    1042:	66c70713          	addi	a4,a4,1644 # 166c <descriptor_list>
    1046:	06070593          	addi	a1,a4,96
				if( dl->lIndexValue == wvi )
				{
					e->opaque = (uint8_t*)dl->addr;
					uint16_t swLen = wLength;
					uint16_t elLen = dl->length;
					e->max_len = (swLen < elLen)?swLen:elLen;
    104a:	832a                	mv	t1,a0
				if( dl->lIndexValue == wvi )
    104c:	4310                	lw	a2,0(a4)
    104e:	02d61063          	bne	a2,a3,106e <usb_pid_handle_data+0x76>
					e->opaque = (uint8_t*)dl->addr;
    1052:	4350                	lw	a2,4(a4)
    1054:	df90                	sw	a2,56(a5)
					uint16_t elLen = dl->length;
    1056:	00874603          	lbu	a2,8(a4)
					e->max_len = (swLen < elLen)?swLen:elLen;
    105a:	01061293          	slli	t0,a2,0x10
    105e:	0102d293          	srli	t0,t0,0x10
    1062:	00557363          	bgeu	a0,t0,1068 <usb_pid_handle_data+0x70>
    1066:	861a                	mv	a2,t1
    1068:	0642                	slli	a2,a2,0x10
    106a:	8241                	srli	a2,a2,0x10
    106c:	d7d0                	sw	a2,44(a5)
			for( i = 0; i < DESCRIPTOR_LIST_ENTRIES; i++ )
    106e:	0731                	addi	a4,a4,12
    1070:	fcb71ee3          	bne	a4,a1,104c <usb_pid_handle_data+0x54>
		}
	}
just_ack:
	{
		//Got the right data.  Acknowledge.
		usb_send_data( 0, 0, 2, 0xD2 ); // Send ACK
    1074:	0d200693          	li	a3,210
    1078:	4609                	li	a2,2
    107a:	4581                	li	a1,0
    107c:	4501                	li	a0,0
    107e:	ace1                	j	1356 <usb_send_data>
		else if( reqShl == (0x0500>>1) ) // SET_ADDRESS = 0x05
    1080:	28000793          	li	a5,640
    1084:	fef618e3          	bne	a2,a5,1074 <usb_pid_handle_data+0x7c>
			ist->my_address = wvi;
    1088:	c354                	sw	a3,4(a4)
    108a:	b7ed                	j	1074 <usb_pid_handle_data+0x7c>

0000108c <EXTI7_0_IRQHandler>:

.section .text.vector_handler
.global EXTI7_0_IRQHandler
.balign 4
EXTI7_0_IRQHandler:
	addi	sp,sp,-80
    108c:	715d                	addi	sp,sp,-80
	sw	a0, 0(sp)
    108e:	c02a                	sw	a0,0(sp)
	sw	a5, 20(sp)
    1090:	ca3e                	sw	a5,20(sp)
	la a5, USB_GPIO_BASE
    1092:	400117b7          	lui	a5,0x40011
    1096:	40078793          	addi	a5,a5,1024 # 40011400 <__global_pointer$+0x20010c00>
	c.lw a0, INDR_OFFSET(a5) // MUST check SE0 immediately.
    109a:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK
    109c:	8961                	andi	a0,a0,24

	sw	a1, 4(sp)
    109e:	c22e                	sw	a1,4(sp)
	sw	a2, 8(sp)
    10a0:	c432                	sw	a2,8(sp)
	sw	a3, 12(sp)
    10a2:	c636                	sw	a3,12(sp)
	sw	a4, 16(sp)
    10a4:	c83a                	sw	a4,16(sp)
	sw	s1, 28(sp)
    10a6:	ce26                	sw	s1,28(sp)

	SAVE_DEBUG_MARKER( 48 );
    10a8:	d812                	sw	tp,48(sp)
	DEBUG_TICK_SETUP
    10aa:	40013237          	lui	tp,0x40013
    10ae:	c5820213          	addi	tp,tp,-936 # 40012c58 <__global_pointer$+0x20012458>
	c.lw a1, INDR_OFFSET(a5)
    10b2:	478c                	lw	a1,8(a5)
	c.andi a1, USB_DMASK;
    10b4:	89e1                	andi	a1,a1,24

	// Finish jump to se0
	c.beqz a0, handle_se0_keepalive
    10b6:	22050963          	beqz	a0,12e8 <handle_se0_keepalive>

	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
    10ba:	4788                	lw	a0,8(a5)
    10bc:	8961                	andi	a0,a0,24
    10be:	02b51b63          	bne	a0,a1,10f4 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
    10c2:	4788                	lw	a0,8(a5)
    10c4:	8961                	andi	a0,a0,24
    10c6:	02b51763          	bne	a0,a1,10f4 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
    10ca:	4788                	lw	a0,8(a5)
    10cc:	8961                	andi	a0,a0,24
    10ce:	02b51363          	bne	a0,a1,10f4 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
    10d2:	4788                	lw	a0,8(a5)
    10d4:	8961                	andi	a0,a0,24
    10d6:	00b51f63          	bne	a0,a1,10f4 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
    10da:	4788                	lw	a0,8(a5)
    10dc:	8961                	andi	a0,a0,24
    10de:	00b51b63          	bne	a0,a1,10f4 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
    10e2:	4788                	lw	a0,8(a5)
    10e4:	8961                	andi	a0,a0,24
    10e6:	00b51763          	bne	a0,a1,10f4 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
    10ea:	4788                	lw	a0,8(a5)
    10ec:	8961                	andi	a0,a0,24
    10ee:	00b51363          	bne	a0,a1,10f4 <syncout>
	c.j syncout
    10f2:	a009                	j	10f4 <syncout>

000010f4 <syncout>:
syncout:
	sw	s0, 24(sp)
    10f4:	cc22                	sw	s0,24(sp)
	li a2, 0
    10f6:	4601                	li	a2,0
	sw	t0, 32(sp)  // XXX NOTE: This is actually unused register - remove some day?
    10f8:	d016                	sw	t0,32(sp)
	sw	t1, 36(sp)
    10fa:	d21a                	sw	t1,36(sp)

000010fc <preamble_loop>:
	
	// This is actually somewhat late.
	// The preamble loop should try to make it earlier.
.balign 4
preamble_loop:
	DEBUG_TICK_MARK
    10fc:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
    1100:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
    1102:	8961                	andi	a0,a0,24
	c.beqz a0, done_usb_message // SE0 here?
    1104:	18050163          	beqz	a0,1286 <done_usb_message>
	c.xor a0, a1;
    1108:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1.
    110a:	8da9                	xor	a1,a1,a0
	j 1f; 1: // 4 cycles?
    110c:	a009                	j	110e <preamble_loop+0x12>
	c.beqz a0, done_preamble
    110e:	c909                	beqz	a0,1120 <done_preamble>
	j 1f; 1: // 4 cycles?
    1110:	a009                	j	1112 <preamble_loop+0x16>
	c.lw s0, INDR_OFFSET(a5);
    1112:	4780                	lw	s0,8(a5)
	c.andi s0, USB_DMASK;
    1114:	8861                	andi	s0,s0,24
	c.xor s0, a1
    1116:	8c2d                	xor	s0,s0,a1

	// TRICKY: This helps retime the USB sync.
	// If s0 is nonzero, then it's changed (we're going too slow)
	c.bnez s0, 2f;  // This code takes 6 cycles or 8 cycles, depending.
    1118:	e011                	bnez	s0,111c <preamble_loop+0x20>
	c.j 1f; 1:
    111a:	a009                	j	111c <preamble_loop+0x20>
	2:
	j preamble_loop // 4 cycles
    111c:	b7c5                	j	10fc <preamble_loop>
    111e:	0001                	nop

00001120 <done_preamble>:
.balign 4
done_preamble:
	sw  t2, 40(sp)
    1120:	d41e                	sw	t2,40(sp)
	sw  ra, 52(sp)
    1122:	da06                	sw	ra,52(sp)
	// 16-byte temporary buffer at 56+sp

	// XXX TODO: Do one byte here to determine the header byte and from that set the CRC.
	c.li s1, 8
    1124:	44a1                	li	s1,8

	// This is the first bit that matters.
	c.li s0, 6 // 1 runs.
    1126:	4419                	li	s0,6

	c.nop; 
    1128:	0001                	nop
    112a:	0001                	nop

0000112c <packet_type_loop>:
packet_type_loop:
	// Up here to delay loop a tad, and we need to execute them anyway.
	// TODO: Maybe we could further sync bits here instead of take up time?
	// I.e. can we do what we're doing above, here, and take less time, but sync
	// up when possible.
	li a3, 0xffff // Starting CRC of 0.   Because USB doesn't respect reverse CRCing.
    112c:	66c1                	lui	a3,0x10
    112e:	16fd                	addi	a3,a3,-1 # ffff <rv003usb.c.4d2817cb+0xcfd5>
	li a4, 0xa001
    1130:	6729                	lui	a4,0xa
    1132:	0705                	addi	a4,a4,1 # a001 <rv003usb.c.4d2817cb+0x6fd7>
	addi  t2, sp, DATA_PTR_OFFSET //rv003usb_internal_data
    1134:	03f10393          	addi	t2,sp,63
	la  t0, 0x80
    1138:	08000293          	li	t0,128
	c.nop
    113c:	0001                	nop
    113e:	0001                	nop

	DEBUG_TICK_MARK
    1140:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
    1144:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
    1146:	8961                	andi	a0,a0,24
	c.beqz a0, done_usb_message // Not se0 complete, that can't happen here and be valid.
    1148:	12050f63          	beqz	a0,1286 <done_usb_message>
	c.xor a0, a1;
    114c:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1, for next cycle
    114e:	8da9                	xor	a1,a1,a0

	// No CRC for the header.
	//c.srli a0, USB_PIN_DP
	//c.addi a0, 1 // 00 -> 1, 11 -> 100
	//c.andi a0, 1 // If 1, 1 if 0, 0
        c.nop
    1150:	0001                	nop
        seqz a0, a0
    1152:	00153513          	seqz	a0,a0

	// Write header into byte in reverse order, because we can.
	c.slli a2, 1
    1156:	0606                	slli	a2,a2,0x1
	c.or a2, a0
    1158:	8e49                	or	a2,a2,a0

	// Handle bit stuffing rules.
	c.addi a0, -1 // 0->0xffffffff 1->0
    115a:	157d                	addi	a0,a0,-1
	c.or s0, a0
    115c:	8c49                	or	s0,s0,a0
	c.andi s0, 7
    115e:	881d                	andi	s0,s0,7
	c.addi s0, -1
    1160:	147d                	addi	s0,s0,-1 # 1fffffff <rv003usb.c.4d2817cb+0x1fffcfd5>
	c.addi s1, -1
    1162:	14fd                	addi	s1,s1,-1 # 40010fff <__global_pointer$+0x200107ff>
	c.bnez s1, packet_type_loop
    1164:	f4e1                	bnez	s1,112c <packet_type_loop>
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////	

	// XXX Here, figure out CRC polynomial.

	li s1, (USB_BUFFER_SIZE*8) // # of bits we culd read.
    1166:	06000493          	li	s1,96
	//
	// When we get here, packet type is loaded in A2.
	// If packet type is 0xXX01 or 0xXX11
	// the LSBs are the inverted packet type.
	// we can branch off of bit 2.
	andi a0, a2, 0x0c
    116a:	00c67513          	andi	a0,a2,12

	// if a0 is 1 then it's DATA (full CRC) otherwise,
	// (0) for setup or PARTIAL CRC.
	// Careful:  This has to take a constant amount of time either way the branch goes.
	c.beqz a0, data_crc
    116e:	c509                	beqz	a0,1178 <data_crc>
	c.li a4, 0x14	
    1170:	4751                	li	a4,20
	c.li a3, 0x1e
    1172:	46f9                	li	a3,30
    1174:	00000013          	.word	0x00000013

00001178 <data_crc>:

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////	
.balign 4
is_end_of_byte:
	HANDLE_EOB_YES
    1178:	00c38023          	sb	a2,0(t2)
    117c:	00138393          	.word	0x00138393

00001180 <bit_process>:
	// end-of-byte.
.balign 4
bit_process:
	// Debug blip
//	c.lw a4, INDR_OFFSET(a5);
	DEBUG_TICK_MARK
    1180:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
    1184:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
    1186:	8961                	andi	a0,a0,24
	c.xor a0, a1;
    1188:	8d2d                	xor	a0,a0,a1
#define HANDLE_NEXT_BYTE(is_end_of_byte, jumptype)  \
	c.addi s1, -1; \
	andi a0, s1, 7; /* s1 could be really really big */ \
	c.jumptype a0, is_end_of_byte /* 4 cycles for this section. (Checked) (Sometimes 5)? */ 

	c.beqz a0, handle_one_bit
    118a:	c50d                	beqz	a0,11b4 <handle_one_bit>

0000118c <handle_zero_bit>:
handle_zero_bit:
	c.xor a1, a0; // Recover a1, for next cycle
    118c:	8da9                	xor	a1,a1,a0
	// TODO: Do we have time to do time fixup here?
	// Can we resync time here?
	// If they are different, we need to sloowwww dowwwnnn
	// There is some free time.  Could do something interesting here!!!
	// I was thinking we could put the resync code here.
	c.j 1f; 1:  //Delay 4 cycles.
    118e:	a009                	j	1190 <handle_zero_bit+0x4>

	c.li s0, 6      // reset runs-of-one.
    1190:	4419                	li	s0,6
	c.beqz a1, se0_complete
    1192:	c9bd                	beqz	a1,1208 <se0_complete>

	// Handle CRC (0 bit)  (From @Domkeykong)
	slli a0,a3,31 // Put a3s LSB into a0s MSB
    1194:	01f69513          	slli	a0,a3,0x1f
	c.srai a0,31    // Copy MSB into all other bits
    1198:	857d                	srai	a0,a0,0x1f
	c.srli a3,1
    119a:	8285                	srli	a3,a3,0x1
	c.and  a0, a4
    119c:	8d79                	and	a0,a0,a4
	c.xor  a3, a0
    119e:	8ea9                	xor	a3,a3,a0

	c.srli a2, 1;  // shift a2 down by 1
    11a0:	8205                	srli	a2,a2,0x1
	HANDLE_NEXT_BYTE(is_end_of_byte, beqz)
    11a2:	14fd                	addi	s1,s1,-1
    11a4:	0074f513          	andi	a0,s1,7
    11a8:	d961                	beqz	a0,1178 <data_crc>
	c.nop
    11aa:	0001                	nop
	c.nop
    11ac:	0001                	nop
	c.nop
    11ae:	0001                	nop
	c.bnez s1, bit_process // + 4 cycles
    11b0:	f8e1                	bnez	s1,1180 <bit_process>
	c.j done_usb_message
    11b2:	a8d1                	j	1286 <done_usb_message>

000011b4 <handle_one_bit>:


.balign 4
handle_one_bit:
	c.addi s0, -1; // Count # of runs of 1 (subtract 1)
    11b4:	147d                	addi	s0,s0,-1
	//HANDLE_CRC (1 bit)
	andi a0, a3, 1
    11b6:	0016f513          	andi	a0,a3,1
	c.addi a0, -1
    11ba:	157d                	addi	a0,a0,-1
	c.and a0, a4
    11bc:	8d79                	and	a0,a0,a4
	c.srli a3, 1
    11be:	8285                	srli	a3,a3,0x1
	c.xor a3, a0
    11c0:	8ea9                	xor	a3,a3,a0

	c.srli a2, 1;  // shift a2 down by 1
    11c2:	8205                	srli	a2,a2,0x1
	ori a2, a2, 0x80
    11c4:	08066613          	ori	a2,a2,128
	c.beqz s0, handle_bit_stuff;
    11c8:	c811                	beqz	s0,11dc <handle_bit_stuff>

	HANDLE_NEXT_BYTE(is_end_of_byte, beqz)
    11ca:	14fd                	addi	s1,s1,-1
    11cc:	0074f513          	andi	a0,s1,7
    11d0:	d545                	beqz	a0,1178 <data_crc>
	c.nop // Need extra delay here because we need more time if it's end-of-byte.
    11d2:	0001                	nop
	c.nop
    11d4:	0001                	nop
	c.nop
    11d6:	0001                	nop
	c.bnez s1, bit_process // + 4 cycles
    11d8:	f4c5                	bnez	s1,1180 <bit_process>
	c.j done_usb_message
    11da:	a075                	j	1286 <done_usb_message>

000011dc <handle_bit_stuff>:

handle_bit_stuff:
	// We want to wait a little bit, then read another byte, and make
	// sure everything is well, before heading back into the main loop
	// Debug blip
	HANDLE_NEXT_BYTE(not_is_end_of_byte_and_bit_stuffed, bnez)
    11dc:	14fd                	addi	s1,s1,-1
    11de:	0074f513          	andi	a0,s1,7
    11e2:	e509                	bnez	a0,11ec <not_is_end_of_byte_and_bit_stuffed>
	HANDLE_EOB_YES
    11e4:	00c38023          	sb	a2,0(t2)
    11e8:	00138393          	.word	0x00138393

000011ec <not_is_end_of_byte_and_bit_stuffed>:

not_is_end_of_byte_and_bit_stuffed:
        DEBUG_TICK_MARK
    11ec:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
    11f0:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
    11f2:	8961                	andi	a0,a0,24
	c.beqz a0, se0_complete
    11f4:	c911                	beqz	a0,1208 <se0_complete>
	c.xor a0, a1;
    11f6:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1, for next cycle.
    11f8:	8da9                	xor	a1,a1,a0

	// If A0 is a 0 then that's bad, we just did a bit stuff
        //   and A0 == 0 means there was no signal transition
	c.beqz a0, done_usb_message
    11fa:	c551                	beqz	a0,1286 <done_usb_message>

        // Reset bit stuff, delay, then continue onto the next actual bit
	c.li s0, 6;
    11fc:	4419                	li	s0,6

        c.nop;
    11fe:	0001                	nop
	nx6p3delay( 2, a0 )
    1200:	450d                	li	a0,3
    1202:	157d                	addi	a0,a0,-1
    1204:	fd7d                	bnez	a0,1202 <not_is_end_of_byte_and_bit_stuffed+0x16>

	c.bnez s1, bit_process // + 4 cycles
    1206:	fcad                	bnez	s1,1180 <bit_process>

00001208 <se0_complete>:

.balign 4
se0_complete:
	// This is triggered when we finished getting a packet.
	andi a0, s1, 7; // Make sure we received an even number of bytes.
    1208:	0074f513          	andi	a0,s1,7
	c.bnez a0, done_usb_message
    120c:	ed2d                	bnez	a0,1286 <done_usb_message>


	// Special: handle ACKs?
	// Now we have to decide what we're doing based on the
	// packet type.
	addi  a1, sp, DATA_PTR_OFFSET
    120e:	03f10593          	addi	a1,sp,63
    1212:	2188                	.short	0x2188
	XW_C_LBU(a0, a1, 0);	//lbu  a0, 0(a1)
	c.addi a1, 1
    1214:	0585                	addi	a1,a1,1
	// 1001 => 10010110 => PID IN
	// 0001 => 10000111 => PID_OUT
	// 1101 => 10110100 => SETUP    (OK)

	// a0 contains first 4 bytes.
	la ra, done_usb_message_in // Common return address for all function calls.
    1216:	00000097          	auipc	ra,0x0
    121a:	07008093          	addi	ra,ra,112 # 1286 <done_usb_message>

	// For ACK don't worry about CRC.
	addi a5, a0, -0b01001011
    121e:	fb550793          	addi	a5,a0,-75

	RESTORE_DEBUG_MARKER(48) // restore x4 for whatever in C land.
    1222:	5242                	lw	tp,48(sp)

	la a4, rv003usb_internal_data
    1224:	1ffff717          	auipc	a4,0x1ffff
    1228:	e0070713          	addi	a4,a4,-512 # 20000024 <rv003usb_internal_data>

	// ACK doesn't need good CRC.
	c.beqz a5, usb_pid_handle_ack
    122c:	c7c9                	beqz	a5,12b6 <usb_pid_handle_ack>

	// Next, check for tokens.
	c.bnez a3, crc_for_tokens_would_be_bad_maybe_data
    122e:	ea85                	bnez	a3,125e <crc_for_tokens_would_be_bad_maybe_data>

00001230 <may_be_a_token>:
    1230:	2192                	.short	0x2192
may_be_a_token:
	// Our CRC is 0, so we might be a token.

	// Do token-y things.
	XW_C_LHU( a2, a1, 0 )
	andi a0, a2, 0x7f // addr
    1232:	07f67513          	andi	a0,a2,127
	c.srli a2, 7
    1236:	821d                	srli	a2,a2,0x7
	c.andi a2, 0xf    // endp
    1238:	8a3d                	andi	a2,a2,15
	li s0, ENDPOINTS
    123a:	4409                	li	s0,2
	bgeu a2, s0, done_usb_message // Make sure < ENDPOINTS
    123c:	04867563          	bgeu	a2,s0,1286 <done_usb_message>
	c.beqz a0,  yes_check_tokens
    1240:	c501                	beqz	a0,1248 <yes_check_tokens>
    1242:	2340                	.short	0x2340
	// Otherwise, we might have our assigned address.
	XW_C_LBU(s0, a4, MY_ADDRESS_OFFSET_BYTES);	//	lbu s0, MY_ADDRESS_OFFSET_BYTES(a4)
	bne s0, a0, done_usb_message // addr != 0 && addr != ours.
    1244:	04a41163          	bne	s0,a0,1286 <done_usb_message>

00001248 <yes_check_tokens>:
yes_check_tokens:
	addi a5, a5, (0b01001011-0b10000111)
    1248:	fc478793          	addi	a5,a5,-60
	c.beqz a5, usb_pid_handle_out
    124c:	cfc1                	beqz	a5,12e4 <usb_pid_handle_out>
	c.addi a5, (0b10000111-0b10010110)
    124e:	17c5                	addi	a5,a5,-15
	c.beqz a5, usb_pid_handle_in
    1250:	00079463          	bnez	a5,1258 <yes_check_tokens+0x10>
    1254:	d33ff06f          	j	f86 <usb_pid_handle_in>
	c.addi a5, (0b10010110-0b10110100)
    1258:	1789                	addi	a5,a5,-30
	c.beqz a5, usb_pid_handle_setup
    125a:	cbb5                	beqz	a5,12ce <usb_pid_handle_setup>

	c.j done_usb_message_in
    125c:	a02d                	j	1286 <done_usb_message>

0000125e <crc_for_tokens_would_be_bad_maybe_data>:

	// CRC is nonzero. (Good for Data packets)
crc_for_tokens_would_be_bad_maybe_data:
	li s0, 0xb001  // UGH: You can't use the CRC16 in reverse :(
    125e:	642d                	lui	s0,0xb
    1260:	0405                	addi	s0,s0,1 # b001 <rv003usb.c.4d2817cb+0x7fd7>
	c.sub a3, s0
    1262:	8e81                	sub	a3,a3,s0
	c.bnez a3, done_usb_message_in
    1264:	e28d                	bnez	a3,1286 <done_usb_message>
	// Good CRC!!
	sub a3, t2, a1 //a3 = # of bytes read..
    1266:	40b386b3          	sub	a3,t2,a1
	c.addi a3, 1
    126a:	0685                	addi	a3,a3,1
	addi a5, a5, (0b01001011-0b11000011)
    126c:	f8878793          	addi	a5,a5,-120
	c.li a2, 0
    1270:	4601                	li	a2,0
	c.beqz a5, usb_pid_handle_data
    1272:	00079463          	bnez	a5,127a <crc_for_tokens_would_be_bad_maybe_data+0x1c>
    1276:	d83ff06f          	j	ff8 <usb_pid_handle_data>
	c.addi a5, (0b11000011-0b11010010)
    127a:	17c5                	addi	a5,a5,-15
	c.li a2, 1
    127c:	4605                	li	a2,1
	c.beqz a5, usb_pid_handle_data
    127e:	00079463          	bnez	a5,1286 <done_usb_message>
    1282:	d77ff06f          	j	ff8 <usb_pid_handle_data>

00001286 <done_usb_message>:

done_usb_message:
done_usb_message_in:
	lw	s0, 24(sp)
    1286:	4462                	lw	s0,24(sp)
	lw	s1, 28(sp)
    1288:	44f2                	lw	s1,28(sp)
	lw	t0, 32(sp)
    128a:	5282                	lw	t0,32(sp)
	lw	t1, 36(sp)
    128c:	5312                	lw	t1,36(sp)
	lw	t2, 40(sp)
    128e:	53a2                	lw	t2,40(sp)
	lw  ra, 52(sp)
    1290:	50d2                	lw	ra,52(sp)

00001292 <ret_from_se0>:

ret_from_se0:
	lw	s1, 28(sp)
    1292:	44f2                	lw	s1,28(sp)
	RESTORE_DEBUG_MARKER(48)
    1294:	5242                	lw	tp,48(sp)
	lw	a2, 8(sp)
    1296:	4622                	lw	a2,8(sp)
	lw	a3, 12(sp)
    1298:	46b2                	lw	a3,12(sp)
	lw	a4, 16(sp)
    129a:	4742                	lw	a4,16(sp)
	lw	a1, 4(sp)
    129c:	4592                	lw	a1,4(sp)

0000129e <interrupt_complete>:

interrupt_complete:
	// Acknowledge interrupt.
	// EXTI->INTFR = 1<<4
	c.j 1f; 1: // Extra little bit of delay to make sure we don't accidentally false fire.
    129e:	a009                	j	12a0 <interrupt_complete+0x2>

	la a5, EXTI_BASE + 20
    12a0:	400107b7          	lui	a5,0x40010
    12a4:	41478793          	addi	a5,a5,1044 # 40010414 <__global_pointer$+0x2000fc14>
	li a0, (1<<USB_PIN_DM)
    12a8:	4521                	li	a0,8
	sw a0, 0(a5)
    12aa:	c388                	sw	a0,0(a5)

	// Restore stack.
	lw	a0, 0(sp)
    12ac:	4502                	lw	a0,0(sp)
	lw	a5, 20(sp)
    12ae:	47d2                	lw	a5,20(sp)
	addi	sp,sp,80
    12b0:	6161                	addi	sp,sp,80
	mret
    12b2:	30200073          	mret

000012b6 <usb_pid_handle_ack>:
	return;
}
*/

usb_pid_handle_ack:
	c.lw a2, 0(a4) //ist->current_endpoint -> endp;
    12b6:	4310                	lw	a2,0(a4)
	c.slli a2, 5
    12b8:	0616                	slli	a2,a2,0x5
	c.add a2, a4
    12ba:	963a                	add	a2,a2,a4
	c.addi a2, ENDP_OFFSET // usb_endpoint eps[ENDPOINTS];
    12bc:	0671                	addi	a2,a2,28

	c.lw a0, (EP_TOGGLE_IN_OFFSET)(a2) // toggle_in=!toggle_in
    12be:	4248                	lw	a0,4(a2)
	c.li a1, 1
    12c0:	4585                	li	a1,1
	c.xor a0, a1
    12c2:	8d2d                	xor	a0,a0,a1
	c.sw a0, (EP_TOGGLE_IN_OFFSET)(a2)
    12c4:	c248                	sw	a0,4(a2)

	c.lw a0, (EP_COUNT_OFFSET)(a2) // count_in
    12c6:	4208                	lw	a0,0(a2)
	c.addi a0, 1
    12c8:	0505                	addi	a0,a0,1
	c.sw a0, (EP_COUNT_OFFSET)(a2)
    12ca:	c208                	sw	a0,0(a2)

	c.j done_usb_message_in
    12cc:	bf6d                	j	1286 <done_usb_message>

000012ce <usb_pid_handle_setup>:
	e->count = 0;
	e->toggle_in = 1;
	ist->setup_request = 1;
}*/
usb_pid_handle_setup:
	c.sw a2, 0(a4) // ist->current_endpoint = endp
    12ce:	c310                	sw	a2,0(a4)
	c.li a1, 1
    12d0:	4585                	li	a1,1
	c.sw a1, SETUP_REQUEST_OFFSET(a4) //ist->setup_request = 1;
    12d2:	c70c                	sw	a1,8(a4)
	c.slli a2, 3+2
    12d4:	0616                	slli	a2,a2,0x5
	c.add a2, a4
    12d6:	963a                	add	a2,a2,a4
	c.sw a1, (ENDP_OFFSET+EP_TOGGLE_IN_OFFSET)(a2) //e->toggle_in = 1;
    12d8:	d20c                	sw	a1,32(a2)
	c.li a1, 0
    12da:	4581                	li	a1,0
	c.sw a1, (ENDP_OFFSET+EP_COUNT_OFFSET)(a2)  //e->count = 0;
    12dc:	ce4c                	sw	a1,28(a2)
	c.sw a1, (ENDP_OFFSET+EP_OPAQUE_OFFSET)(a2)  //e->opaque = 0;
    12de:	de0c                	sw	a1,56(a2)
	c.sw a1, (ENDP_OFFSET+EP_TOGGLE_OUT_OFFSET)(a2) //e->toggle_out = 0;
    12e0:	d24c                	sw	a1,36(a2)
	c.j done_usb_message_in	
    12e2:	b755                	j	1286 <done_usb_message>

000012e4 <usb_pid_handle_out>:
    12e4:	a310                	.short	0xa310
//This will correctly swap back the endpoint.
usb_pid_handle_out:
	//void usb_pid_handle_out( uint32_t addr, uint8_t * data, uint32_t endp, uint32_t unused, struct rv003usb_internal * ist )	
	//sb a2, 0(a4) //ist->current_endpoint = endp;
	XW_C_SB( a2, a4, 0 ); // current_endpoint = endp
	c.j done_usb_message_in
    12e6:	b745                	j	1286 <done_usb_message>

000012e8 <handle_se0_keepalive>:

handle_se0_keepalive:
	// In here, we want to do smart stuff with the
	// 1ms tick.

	la  a0, SYSTICK_CNT
    12e8:	e000f537          	lui	a0,0xe000f
    12ec:	0521                	addi	a0,a0,8 # e000f008 <__global_pointer$+0xc000e808>
	la a4, rv003usb_internal_data
    12ee:	1ffff717          	auipc	a4,0x1ffff
    12f2:	d3670713          	addi	a4,a4,-714 # 20000024 <rv003usb_internal_data>
	c.lw a1, LAST_SE0_OFFSET(a4) //last cycle count   last_se0_cyccount
    12f6:	4b0c                	lw	a1,16(a4)
	c.lw a2, 0(a0) //this cycle count
    12f8:	4110                	lw	a2,0(a0)
	c.sw a2, LAST_SE0_OFFSET(a4) //store it back to last_se0_cyccount
    12fa:	cb10                	sw	a2,16(a4)
	c.sub a2, a1
    12fc:	8e0d                	sub	a2,a2,a1
	c.sw a2, DELTA_SE0_OFFSET(a4) //record delta_se0_cyccount
    12fe:	cb50                	sw	a2,20(a4)

	li a1, 48000
    1300:	65b1                	lui	a1,0xc
    1302:	b8058593          	addi	a1,a1,-1152 # bb80 <rv003usb.c.4d2817cb+0x8b56>
	c.sub a2, a1
    1306:	8e0d                	sub	a2,a2,a1
	// This is our deviance from 48MHz.

	// Make sure we aren't in left field.
	li a5, 4000
    1308:	6785                	lui	a5,0x1
    130a:	fa078793          	addi	a5,a5,-96 # fa0 <usb_pid_handle_in+0x1a>
	bge a2, a5, ret_from_se0
    130e:	f8f652e3          	bge	a2,a5,1292 <ret_from_se0>
	li a5, -4000
    1312:	77fd                	lui	a5,0xfffff
    1314:	06078793          	addi	a5,a5,96 # fffff060 <__global_pointer$+0xdfffe860>
	blt a2, a5, ret_from_se0
    1318:	f6f64de3          	blt	a2,a5,1292 <ret_from_se0>

	c.lw a1, SE0_WINDUP_OFFSET(a4) // load windup se0_windup
    131c:	4f0c                	lw	a1,24(a4)
	c.add a1, a2
    131e:	95b2                	add	a1,a1,a2
	c.sw a1, SE0_WINDUP_OFFSET(a4) // save windup
    1320:	cf0c                	sw	a1,24(a4)

	// No further adjustments
	beqz a1, ret_from_se0
    1322:	d9a5                	beqz	a1,1292 <ret_from_se0>

	// 0x40021000 = RCC.CTLR
	la a4, 0x40021000
    1324:	40021737          	lui	a4,0x40021
	lw a0, 0(a4)
    1328:	4308                	lw	a0,0(a4)
	srli a2, a0, 3 // Extract HSI Trim.
    132a:	00355613          	srli	a2,a0,0x3
	andi a2, a2, 0b11111
    132e:	8a7d                	andi	a2,a2,31
	li a5, 0xffffff07  
    1330:	f0700793          	li	a5,-249
	and a0, a0, a5	// Mask off non-HSI
    1334:	8d7d                	and	a0,a0,a5

	// Decimate windup - use as HSIrim.
	neg a1, a1
    1336:	40b005b3          	neg	a1,a1
	srai a2, a1, 9
    133a:	4095d613          	srai	a2,a1,0x9
	addi a2, a2, 16  // add HSI offset.
    133e:	0641                	addi	a2,a2,16

	// Put trim in place in register.
	slli a2, a2, 3
    1340:	060e                	slli	a2,a2,0x3
	or a0, a0, a2
    1342:	8d51                	or	a0,a0,a2
	sw a0, 0(a4)
    1344:	c308                	sw	a0,0(a4)

	j ret_from_se0
    1346:	b7b1                	j	1292 <ret_from_se0>

00001348 <usb_send_empty>:


.balign 4
//void usb_send_empty( uint32_t token );
usb_send_empty:
	c.mv a3, a0
    1348:	86aa                	mv	a3,a0
	la a0, always0
    134a:	00000517          	auipc	a0,0x0
    134e:	13a50513          	addi	a0,a0,314 # 1484 <always0>
	li a1, 2
    1352:	4589                	li	a1,2
	c.mv a2, a1
    1354:	862e                	mv	a2,a1

00001356 <usb_send_data>:
//void usb_send_data( uint8_t * data, uint32_t length, uint32_t poly_function, uint32_t token );
usb_send_data:
	addi	sp,sp,-16
    1356:	1141                	addi	sp,sp,-16
	sw	s0, 0(sp)
    1358:	c022                	sw	s0,0(sp)
	sw	s1, 4(sp)
    135a:	c226                	sw	s1,4(sp)

	la a5, USB_GPIO_BASE
    135c:	400117b7          	lui	a5,0x40011
    1360:	40078793          	addi	a5,a5,1024 # 40011400 <__global_pointer$+0x20010c00>

	// ASAP: Turn the bus around and send our preamble + token.
	c.lw a4, CFGLR_OFFSET(a5)
    1364:	4398                	lw	a4,0(a5)

	li s1, ~((0b1111<<(USB_PIN_DP*4)) | (0b1111<<(USB_PIN_DM*4)))
    1366:	fff014b7          	lui	s1,0xfff01
    136a:	14fd                	addi	s1,s1,-1 # fff00fff <__global_pointer$+0xdff007ff>
	and a4, s1, a4
    136c:	8f65                	and	a4,a4,s1

	// Convert D+/D- into 2MHz outputs
	li s1, ((0b0010<<(USB_PIN_DP*4)) | (0b0010<<(USB_PIN_DM*4)))
    136e:	000224b7          	lui	s1,0x22
	or a4, s1, a4
    1372:	8f45                	or	a4,a4,s1

	li s1, (1<<USB_PIN_DP) | (1<<(USB_PIN_DM+16))
    1374:	000804b7          	lui	s1,0x80
    1378:	04c1                	addi	s1,s1,16 # 80010 <rv003usb.c.4d2817cb+0x7cfe6>
	c.sw s1, BSHR_OFFSET(a5)
    137a:	cb84                	sw	s1,16(a5)

	//00: Universal push-pull output mode
	c.sw a4, CFGLR_OFFSET(a5)
    137c:	c398                	sw	a4,0(a5)

	li t1, (1<<USB_PIN_DP) | (1<<(USB_PIN_DM+16)) | (1<<USB_PIN_DM) | (1<<(USB_PIN_DP+16));
    137e:	00180337          	lui	t1,0x180
    1382:	0361                	addi	t1,t1,24 # 180018 <rv003usb.c.4d2817cb+0x17cfee>

	SAVE_DEBUG_MARKER( 8 )
    1384:	c412                	sw	tp,8(sp)

	// Save off our preamble and token.
	c.slli a3, 7     //Put token further up so it gets sent later.
    1386:	069e                	slli	a3,a3,0x7
	ori s0, a3, 0x40  
    1388:	0406e413          	ori	s0,a3,64

	li t0, 0x0000
    138c:	4281                	li	t0,0
	c.bnez a2, done_poly_check
    138e:	e609                	bnez	a2,1398 <done_poly_check>
	li t0, 0xa001
    1390:	62a9                	lui	t0,0xa
    1392:	0285                	addi	t0,t0,1 # a001 <rv003usb.c.4d2817cb+0x6fd7>
	li a2, 0xffff
    1394:	6641                	lui	a2,0x10
    1396:	167d                	addi	a2,a2,-1 # ffff <rv003usb.c.4d2817cb+0xcfd5>

00001398 <done_poly_check>:
done_poly_check:

	c.slli a1, 3 // bump up one extra to be # of bits
    1398:	058e                	slli	a1,a1,0x3
	mv t2, a1
    139a:	83ae                	mv	t2,a1

	// t0 is our polynomial
	// a2 is our running CRC.
	// a3 is our token.
	DEBUG_TICK_SETUP
    139c:	40013237          	lui	tp,0x40013
    13a0:	c5820213          	addi	tp,tp,-936 # 40012c58 <__global_pointer$+0x20012458>

	c.li a4, 6 // reset bit stuffing.
    13a4:	4719                	li	a4,6
	c.li a1, 15 // 15 bits.
    13a6:	45bd                	li	a1,15

	//c.nop; c.nop; c.nop;
	c.j pre_and_tok_send_inner_loop
    13a8:	a011                	j	13ac <pre_and_tok_send_inner_loop>
    13aa:	0001                	nop

000013ac <pre_and_tok_send_inner_loop>:
		* We have to decrement our bit stuffing index.
		* If it is 0, we can reset our bit stuffing index.
	*/

	// a3 is now the lsb of s0 (the 'next bit' to read out)
	c.mv a3, s0
    13ac:	86a2                	mv	a3,s0
	c.srli s0, 1 // Shift down into the next bit.
    13ae:	8005                	srli	s0,s0,0x1
	c.andi a3, 1
    13b0:	8a85                	andi	a3,a3,1
	// If a3 is 0, we should FLIP
	// if a3 is 1, we should NOT flip.

	c.addi a4, -1
    13b2:	177d                	addi	a4,a4,-1 # 40020fff <__global_pointer$+0x200207ff>
	c.bnez a3, pre_and_tok_send_one_bit
    13b4:	e681                	bnez	a3,13bc <pre_and_tok_send_one_bit>
//Send 0 bit. (Flip)
	// Flip s1 (our bshr setting) by xoring it.
	// 10.....01
	// 11.....11 (xor with)
	// 01.....10
	xor s1, s1, t1
    13b6:	0064c4b3          	xor	s1,s1,t1
	c.li a4, 6 // reset bit stuffing.
    13ba:	4719                	li	a4,6

000013bc <pre_and_tok_send_one_bit>:
	// DO NOT flip.  Allow a4 to increment.
// Deliberately unaligned for timing purposes.
.balign 4
pre_and_tok_send_one_bit:
	sw s1, BSHR_OFFSET(a5)
    13bc:	cb84                	sw	s1,16(a5)
	//Bit stuffing doesn't happen.
	c.addi a1, -1
    13be:	15fd                	addi	a1,a1,-1
	c.beqz a1, pre_and_tok_done_sending_data
    13c0:	c591                	beqz	a1,13cc <pre_and_tok_done_sending_data>
	nx6p3delay( 2, a3 );	c.nop;             // Free time!
    13c2:	468d                	li	a3,3
    13c4:	16fd                	addi	a3,a3,-1
    13c6:	fefd                	bnez	a3,13c4 <pre_and_tok_send_one_bit+0x8>
    13c8:	0001                	nop
	c.j pre_and_tok_send_inner_loop
    13ca:	b7cd                	j	13ac <pre_and_tok_send_inner_loop>

000013cc <pre_and_tok_done_sending_data>:
////////////////////////////////////////////////////////////////////////////

	// We have very little time here.  Just enough to do this.

	//Restore size.
	mv a1, t2//lw  a1, 12(sp)
    13cc:	859e                	mv	a1,t2
	c.beqz a1, no_really_done_sending_data  //No actual payload?  Bail!
    13ce:	c5ad                	beqz	a1,1438 <no_really_done_sending_data>
	c.addi a1, -1
    13d0:	15fd                	addi	a1,a1,-1
//	beqz t2, no_really_done_sending_data 

	bnez t0, done_poly_check2
    13d2:	00029463          	bnez	t0,13da <done_poly_check2>
	li a2, 0xffff
    13d6:	6641                	lui	a2,0x10
    13d8:	167d                	addi	a2,a2,-1 # ffff <rv003usb.c.4d2817cb+0xcfd5>

000013da <done_poly_check2>:
    13da:	0001                	nop

000013dc <load_next_byte>:
    13dc:	2100                	.short	0x2100
	// CH32v003 has the XW extension.
	// this replaces: lb s0, 0(a0)
	XW_C_LBU(s0, a0, 0);
	//lb s0, 0(a0)
	//	.long 0x00150513 // addi a0, a0, 1  (For alignment's sake)
	c.addi a0, 1
    13de:	0505                	addi	a0,a0,1

000013e0 <send_inner_loop>:
		* We have to decrement our bit stuffing index.
		* If it is 0, we can reset our bit stuffing index.
	*/

	// a3 is now the lsb of s0 (the 'next bit' to read out)
	c.mv a3, s0
    13e0:	86a2                	mv	a3,s0
	c.andi a3, 1
    13e2:	8a85                	andi	a3,a3,1
	// If a3 is 0, we should FLIP
	// if a3 is 1, we should NOT flip.
	c.beqz a3, send_zero_bit
    13e4:	ce81                	beqz	a3,13fc <send_zero_bit>
	c.srli s0, 1 // Shift down into the next bit.
    13e6:	8005                	srli	s0,s0,0x1
//send_one_bit:
	//HANDLE_CRC (1 bit)
	andi a3, a2, 1
    13e8:	00167693          	andi	a3,a2,1
	c.addi a3, -1
    13ec:	16fd                	addi	a3,a3,-1
	and a3, a3, t0
    13ee:	0056f6b3          	and	a3,a3,t0
	c.srli a2, 1
    13f2:	8205                	srli	a2,a2,0x1
	c.xor a2, a3
    13f4:	8e35                	xor	a2,a2,a3

	c.addi a4, -1
    13f6:	177d                	addi	a4,a4,-1
	c.beqz a4, insert_stuffed_bit
    13f8:	cf25                	beqz	a4,1470 <insert_stuffed_bit>
	c.j cont_after_jump
    13fa:	a829                	j	1414 <cont_after_jump>

000013fc <send_zero_bit>:
//Send 0 bit. (Flip)
.balign 4
send_zero_bit:
	c.srli s0, 1 // Shift down into the next bit.
    13fc:	8005                	srli	s0,s0,0x1
	// a3 is temp
	// t0 is polynomial.

	// XXX WARNING: this was by https://github.com/cnlohr/rv003usb/issues/7 
	// TODO Check me!
	slli a3,a2,31 // Put a3s LSB into a0s MSB
    13fe:	01f61693          	slli	a3,a2,0x1f
	c.srai a3,31    // Copy MSB into all other bits
    1402:	86fd                	srai	a3,a3,0x1f

	// Flip s1 (our bshr setting) by xoring it.
	// 10.....01
	// 11.....11 (xor with)
	// 01.....10
	xor s1, s1, t1
    1404:	0064c4b3          	xor	s1,s1,t1
	sw s1, BSHR_OFFSET(a5)
    1408:	cb84                	sw	s1,16(a5)

	c.li a4, 6 // reset bit stuffing.
    140a:	4719                	li	a4,6

	// XXX XXX CRC down here to make bit stuffing timings line up.
	c.srli a2,1
    140c:	8205                	srli	a2,a2,0x1
	and a3,a3,t0
    140e:	0056f6b3          	and	a3,a3,t0
	c.xor  a2,a3 
    1412:	8e35                	xor	a2,a2,a3

00001414 <cont_after_jump>:

.balign 4
cont_after_jump:
send_end_bit_complete:
	c.beqz a1, done_sending_data
    1414:	c981                	beqz	a1,1424 <done_sending_data>
	andi a3, a1, 7
    1416:	0075f693          	andi	a3,a1,7
	c.addi a1, -1
    141a:	15fd                	addi	a1,a1,-1
	c.beqz a3, load_next_byte
    141c:	d2e1                	beqz	a3,13dc <load_next_byte>
	// Wait an extra few cycles.
	c.j 1f; 1:
    141e:	a009                	j	1420 <cont_after_jump+0xc>
	c.j send_inner_loop
    1420:	b7c1                	j	13e0 <send_inner_loop>
    1422:	0001                	nop

00001424 <done_sending_data>:

.balign 4
done_sending_data:
	// BUT WAIT!! MAYBE WE NEED TO CRC!
	beqz t0, no_really_done_sending_data
    1424:	00028a63          	beqz	t0,1438 <no_really_done_sending_data>
	srli t0, t0, 8 // reset poly - we don't want it anymore.
    1428:	0082d293          	srli	t0,t0,0x8
	li a1, 7 // Load 8 more bits out
    142c:	459d                	li	a1,7
	beqz t0, send_inner_loop  //Second CRC byte
    142e:	fa0289e3          	beqz	t0,13e0 <send_inner_loop>
	// First CRC byte
	not s0, a2 // get read to send out the CRC.
    1432:	fff64413          	not	s0,a2
	c.j send_inner_loop
    1436:	b76d                	j	13e0 <send_inner_loop>

00001438 <no_really_done_sending_data>:
.balign 4
no_really_done_sending_data:

//	c.bnez a2, poly_function  TODO: Uncomment me!

	nx6p3delay( 2, a3 );
    1438:	468d                	li	a3,3
    143a:	16fd                	addi	a3,a3,-1
    143c:	fefd                	bnez	a3,143a <no_really_done_sending_data+0x2>

	// Need to perform an SE0.
	li s1, (1<<(USB_PIN_DM+16)) | (1<<(USB_PIN_DP+16))
    143e:	001804b7          	lui	s1,0x180
	c.sw s1, BSHR_OFFSET(a5)
    1442:	cb84                	sw	s1,16(a5)

	nx6p3delay( 7, a3 );
    1444:	46a1                	li	a3,8
    1446:	16fd                	addi	a3,a3,-1
    1448:	fefd                	bnez	a3,1446 <no_really_done_sending_data+0xe>

	li s1, (1<<(USB_PIN_DM)) | (1<<(USB_PIN_DP+16))
    144a:	001004b7          	lui	s1,0x100
    144e:	04a1                	addi	s1,s1,8 # 100008 <rv003usb.c.4d2817cb+0xfcfde>
	c.sw s1, BSHR_OFFSET(a5)
    1450:	cb84                	sw	s1,16(a5)

	lw s1, CFGLR_OFFSET(a5)
    1452:	4384                	lw	s1,0(a5)
	// Convert D+/D- into inputs.
	li a3, ~((0b11<<(USB_PIN_DP*4)) | (0b11<<(USB_PIN_DM*4)))
    1454:	fffcd6b7          	lui	a3,0xfffcd
    1458:	16fd                	addi	a3,a3,-1 # fffccfff <__global_pointer$+0xdffcc7ff>
	and s1, a3, s1
    145a:	8cf5                	and	s1,s1,a3
	// 01: Floating input mode.
	li a3, ((0b01<<(USB_PIN_DP*4+2)) | (0b01<<(USB_PIN_DM*4+2)))
    145c:	000446b7          	lui	a3,0x44
	or s1, a3, s1
    1460:	8cd5                	or	s1,s1,a3
	sw s1, CFGLR_OFFSET(a5)
    1462:	c384                	sw	s1,0(a5)

	lw	s0, 0(sp)
    1464:	4402                	lw	s0,0(sp)
	lw	s1, 4(sp)
    1466:	4492                	lw	s1,4(sp)
	RESTORE_DEBUG_MARKER( 8 )
    1468:	4222                	lw	tp,8(sp)
	addi	sp,sp,16
    146a:	0141                	addi	sp,sp,16
	ret
    146c:	8082                	ret
    146e:	0001                	nop

00001470 <insert_stuffed_bit>:

.balign 4
// TODO: This seems to be either 222 or 226 (not 224) in cases.
// It's off by 2 clock cycles.  Probably OK, but, hmm.
insert_stuffed_bit:
	nx6p3delay(3, a3)
    1470:	4691                	li	a3,4
    1472:	16fd                	addi	a3,a3,-1 # 43fff <rv003usb.c.4d2817cb+0x40fd5>
    1474:	fefd                	bnez	a3,1472 <insert_stuffed_bit+0x2>
	xor s1, s1, t1
    1476:	0064c4b3          	xor	s1,s1,t1
	c.li a4, 6 // reset bit stuffing.
    147a:	4719                	li	a4,6
	c.nop
    147c:	0001                	nop
	c.nop
    147e:	0001                	nop
	sw s1, BSHR_OFFSET(a5)
    1480:	cb84                	sw	s1,16(a5)
	c.j send_end_bit_complete
    1482:	bf49                	j	1414 <cont_after_jump>

00001484 <always0>:
    1484:	00000000          	.word	0x00000000

00001488 <string3>:
    1488:	00300308 00300030 00000000              ..0.0.0.....

00001494 <string2>:
    1494:	00330320 0041002d 00690078 00200073      .3.-.A.x.i.s. .
    14a4:	006f004a 00730079 00690074 006b0063     J.o.y.s.t.i.c.k.
    14b4:	00000000                                ....

000014b8 <string1>:
    14b8:	0041030e 00420044 00740065 00000061     ..A.D.B.e.t.a...

000014c8 <string0>:
    14c8:	04090304 00000338 000001a6 000002e0     ....8...........
    14d8:	000001a6 0000032c 000001a6 000002e0     ....,...........
    14e8:	00000338 00000338 0000032c 000002e0     8...8...,.......
    14f8:	0000018e 0000018e 0000018e 0000032c     ............,...

00001508 <__clz_tab>:
    1508:	02020100 03030303 04040404 04040404     ................
    1518:	05050505 05050505 05050505 05050505     ................
    1528:	06060606 06060606 06060606 06060606     ................
    1538:	06060606 06060606 06060606 06060606     ................
    1548:	07070707 07070707 07070707 07070707     ................
    1558:	07070707 07070707 07070707 07070707     ................
    1568:	07070707 07070707 07070707 07070707     ................
    1578:	07070707 07070707 07070707 07070707     ................
    1588:	08080808 08080808 08080808 08080808     ................
    1598:	08080808 08080808 08080808 08080808     ................
    15a8:	08080808 08080808 08080808 08080808     ................
    15b8:	08080808 08080808 08080808 08080808     ................
    15c8:	08080808 08080808 08080808 08080808     ................
    15d8:	08080808 08080808 08080808 08080808     ................
    15e8:	08080808 08080808 08080808 08080808     ................
    15f8:	08080808 08080808 08080808 08080808     ................

00001608 <gamepad_hid_desc>:
    1608:	05090105 010500a1 7f258115 31093009     ..........%..0.1
    1618:	03953509 02810875 01190905 00150829     .5..u.......)...
    1628:	08950125 02810175 000000c0              %...u.......

00001634 <config_descriptor>:
    1634:	00220209 80000101 00040964 00030100     ..".....d.......
    1644:	21090000 01000110 07002922 04038105     ...!....")......
    1654:	00000100                                ....

00001658 <device_descriptor>:
    1658:	01100112 08000003 c0031209 02010002     ................
    1668:	00000103                                ....

0000166c <descriptor_list>:
    166c:	00000100 00001658 00000012 00000200     ....X...........
    167c:	00001634 00000022 00002200 00001608     4..."...."......
    168c:	00000029 00002100 00001646 00000009     )....!..F.......
    169c:	00000300 000014c8 00000004 04090301     ................
    16ac:	000014b8 0000000e 04090302 00001494     ................
    16bc:	00000020 04090303 00001488 00000008      ...............

000016cc <GPIO_PORT_MAP>:
    16cc:	40010800 00000000 40011000 40011400     ...@.......@...@
